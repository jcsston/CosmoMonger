#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CosmoMonger.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="CosmoMonger")]
	public partial class CosmoMongerDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBaseShip(BaseShip instance);
    partial void UpdateBaseShip(BaseShip instance);
    partial void DeleteBaseShip(BaseShip instance);
    partial void InsertWeapon(Weapon instance);
    partial void UpdateWeapon(Weapon instance);
    partial void DeleteWeapon(Weapon instance);
    partial void InsertBuddyList(BuddyList instance);
    partial void UpdateBuddyList(BuddyList instance);
    partial void DeleteBuddyList(BuddyList instance);
    partial void InsertGood(Good instance);
    partial void UpdateGood(Good instance);
    partial void DeleteGood(Good instance);
    partial void InsertIgnoreList(IgnoreList instance);
    partial void UpdateIgnoreList(IgnoreList instance);
    partial void DeleteIgnoreList(IgnoreList instance);
    partial void InsertInProgressCombat(InProgressCombat instance);
    partial void UpdateInProgressCombat(InProgressCombat instance);
    partial void DeleteInProgressCombat(InProgressCombat instance);
    partial void InsertJumpDrive(JumpDrive instance);
    partial void UpdateJumpDrive(JumpDrive instance);
    partial void DeleteJumpDrive(JumpDrive instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertNpc(Npc instance);
    partial void UpdateNpc(Npc instance);
    partial void DeleteNpc(Npc instance);
    partial void InsertNpcType(NpcType instance);
    partial void UpdateNpcType(NpcType instance);
    partial void DeleteNpcType(NpcType instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertShield(Shield instance);
    partial void UpdateShield(Shield instance);
    partial void DeleteShield(Shield instance);
    partial void InsertShip(Ship instance);
    partial void UpdateShip(Ship instance);
    partial void DeleteShip(Ship instance);
    partial void InsertShipGood(ShipGood instance);
    partial void UpdateShipGood(ShipGood instance);
    partial void DeleteShipGood(ShipGood instance);
    partial void InsertCosmoSystem(CosmoSystem instance);
    partial void UpdateCosmoSystem(CosmoSystem instance);
    partial void DeleteCosmoSystem(CosmoSystem instance);
    partial void InsertSystemGood(SystemGood instance);
    partial void UpdateSystemGood(SystemGood instance);
    partial void DeleteSystemGood(SystemGood instance);
    partial void InsertSystemJumpDriveUpgrade(SystemJumpDriveUpgrade instance);
    partial void UpdateSystemJumpDriveUpgrade(SystemJumpDriveUpgrade instance);
    partial void DeleteSystemJumpDriveUpgrade(SystemJumpDriveUpgrade instance);
    partial void InsertSystemShieldUpgrade(SystemShieldUpgrade instance);
    partial void UpdateSystemShieldUpgrade(SystemShieldUpgrade instance);
    partial void DeleteSystemShieldUpgrade(SystemShieldUpgrade instance);
    partial void InsertSystemShip(SystemShip instance);
    partial void UpdateSystemShip(SystemShip instance);
    partial void DeleteSystemShip(SystemShip instance);
    partial void InsertSystemWeaponUpgrade(SystemWeaponUpgrade instance);
    partial void UpdateSystemWeaponUpgrade(SystemWeaponUpgrade instance);
    partial void DeleteSystemWeaponUpgrade(SystemWeaponUpgrade instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public CosmoMongerDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CosmoMongerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CosmoMongerDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CosmoMongerDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CosmoMongerDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CosmoMongerDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BaseShip> BaseShips
		{
			get
			{
				return this.GetTable<BaseShip>();
			}
		}
		
		public System.Data.Linq.Table<Weapon> Weapons
		{
			get
			{
				return this.GetTable<Weapon>();
			}
		}
		
		public System.Data.Linq.Table<BuddyList> BuddyLists
		{
			get
			{
				return this.GetTable<BuddyList>();
			}
		}
		
		public System.Data.Linq.Table<Good> Goods
		{
			get
			{
				return this.GetTable<Good>();
			}
		}
		
		public System.Data.Linq.Table<IgnoreList> IgnoreLists
		{
			get
			{
				return this.GetTable<IgnoreList>();
			}
		}
		
		public System.Data.Linq.Table<InProgressCombat> InProgressCombats
		{
			get
			{
				return this.GetTable<InProgressCombat>();
			}
		}
		
		public System.Data.Linq.Table<JumpDrive> JumpDrives
		{
			get
			{
				return this.GetTable<JumpDrive>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Npc> Npcs
		{
			get
			{
				return this.GetTable<Npc>();
			}
		}
		
		public System.Data.Linq.Table<NpcType> NpcTypes
		{
			get
			{
				return this.GetTable<NpcType>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<Shield> Shields
		{
			get
			{
				return this.GetTable<Shield>();
			}
		}
		
		public System.Data.Linq.Table<Ship> Ships
		{
			get
			{
				return this.GetTable<Ship>();
			}
		}
		
		public System.Data.Linq.Table<ShipGood> ShipGoods
		{
			get
			{
				return this.GetTable<ShipGood>();
			}
		}
		
		public System.Data.Linq.Table<CosmoSystem> CosmoSystems
		{
			get
			{
				return this.GetTable<CosmoSystem>();
			}
		}
		
		public System.Data.Linq.Table<SystemGood> SystemGoods
		{
			get
			{
				return this.GetTable<SystemGood>();
			}
		}
		
		public System.Data.Linq.Table<SystemJumpDriveUpgrade> SystemJumpDriveUpgrades
		{
			get
			{
				return this.GetTable<SystemJumpDriveUpgrade>();
			}
		}
		
		public System.Data.Linq.Table<SystemShieldUpgrade> SystemShieldUpgrades
		{
			get
			{
				return this.GetTable<SystemShieldUpgrade>();
			}
		}
		
		public System.Data.Linq.Table<SystemShip> SystemShips
		{
			get
			{
				return this.GetTable<SystemShip>();
			}
		}
		
		public System.Data.Linq.Table<SystemWeaponUpgrade> SystemWeaponUpgrades
		{
			get
			{
				return this.GetTable<SystemWeaponUpgrade>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[Table()]
	public partial class BaseShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BaseShipId;
		
		private string _Model;
		
		private int _BasePrice;
		
		private int _CargoSpace;
		
		private int _InitialJumpDriveId;
		
		private int _InitialWeaponId;
		
		private int _InitialShieldId;
		
		private EntitySet<Ship> _Ships;
		
		private EntitySet<SystemShip> _SystemShips;
		
		private EntityRef<Weapon> _Weapon;
		
		private EntityRef<JumpDrive> _JumpDrive;
		
		private EntityRef<Shield> _Shield;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBaseShipIdChanging(int value);
    partial void OnBaseShipIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBasePriceChanging(int value);
    partial void OnBasePriceChanged();
    partial void OnCargoSpaceChanging(int value);
    partial void OnCargoSpaceChanged();
    partial void OnInitialJumpDriveIdChanging(int value);
    partial void OnInitialJumpDriveIdChanged();
    partial void OnInitialWeaponIdChanging(int value);
    partial void OnInitialWeaponIdChanged();
    partial void OnInitialShieldIdChanging(int value);
    partial void OnInitialShieldIdChanged();
    #endregion
		
		public BaseShip()
		{
			this._Ships = new EntitySet<Ship>(new Action<Ship>(this.attach_Ships), new Action<Ship>(this.detach_Ships));
			this._SystemShips = new EntitySet<SystemShip>(new Action<SystemShip>(this.attach_SystemShips), new Action<SystemShip>(this.detach_SystemShips));
			this._Weapon = default(EntityRef<Weapon>);
			this._JumpDrive = default(EntityRef<JumpDrive>);
			this._Shield = default(EntityRef<Shield>);
			OnCreated();
		}
		
		[Column(Storage="_BaseShipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BaseShipId
		{
			get
			{
				return this._BaseShipId;
			}
			set
			{
				if ((this._BaseShipId != value))
				{
					this.OnBaseShipIdChanging(value);
					this.SendPropertyChanging();
					this._BaseShipId = value;
					this.SendPropertyChanged("BaseShipId");
					this.OnBaseShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_Model", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Model;
			}
			set
			{
				if ((this._Model != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Model = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int NOT NULL")]
		public int BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_CargoSpace", DbType="Int NOT NULL")]
		public int CargoSpace
		{
			get
			{
				return this._CargoSpace;
			}
			set
			{
				if ((this._CargoSpace != value))
				{
					this.OnCargoSpaceChanging(value);
					this.SendPropertyChanging();
					this._CargoSpace = value;
					this.SendPropertyChanged("CargoSpace");
					this.OnCargoSpaceChanged();
				}
			}
		}
		
		[Column(Storage="_InitialJumpDriveId", DbType="Int NOT NULL")]
		public int InitialJumpDriveId
		{
			get
			{
				return this._InitialJumpDriveId;
			}
			set
			{
				if ((this._InitialJumpDriveId != value))
				{
					if (this._JumpDrive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInitialJumpDriveIdChanging(value);
					this.SendPropertyChanging();
					this._InitialJumpDriveId = value;
					this.SendPropertyChanged("InitialJumpDriveId");
					this.OnInitialJumpDriveIdChanged();
				}
			}
		}
		
		[Column(Storage="_InitialWeaponId", DbType="Int NOT NULL")]
		public int InitialWeaponId
		{
			get
			{
				return this._InitialWeaponId;
			}
			set
			{
				if ((this._InitialWeaponId != value))
				{
					if (this._Weapon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInitialWeaponIdChanging(value);
					this.SendPropertyChanging();
					this._InitialWeaponId = value;
					this.SendPropertyChanged("InitialWeaponId");
					this.OnInitialWeaponIdChanged();
				}
			}
		}
		
		[Column(Storage="_InitialShieldId", DbType="Int NOT NULL")]
		public int InitialShieldId
		{
			get
			{
				return this._InitialShieldId;
			}
			set
			{
				if ((this._InitialShieldId != value))
				{
					if (this._Shield.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInitialShieldIdChanging(value);
					this.SendPropertyChanging();
					this._InitialShieldId = value;
					this.SendPropertyChanged("InitialShieldId");
					this.OnInitialShieldIdChanged();
				}
			}
		}
		
		[Association(Name="BaseShip_Ship", Storage="_Ships", OtherKey="BaseShipId")]
		public EntitySet<Ship> Ships
		{
			get
			{
				return this._Ships;
			}
			set
			{
				this._Ships.Assign(value);
			}
		}
		
		[Association(Name="BaseShip_SystemShip", Storage="_SystemShips", OtherKey="BaseShipId")]
		public EntitySet<SystemShip> SystemShips
		{
			get
			{
				return this._SystemShips;
			}
			set
			{
				this._SystemShips.Assign(value);
			}
		}
		
		[Association(Name="Weapon_BaseShip", Storage="_Weapon", ThisKey="InitialWeaponId", IsForeignKey=true)]
		public Weapon InitialWeapon
		{
			get
			{
				return this._Weapon.Entity;
			}
			set
			{
				Weapon previousValue = this._Weapon.Entity;
				if (((previousValue != value) 
							|| (this._Weapon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Weapon.Entity = null;
						previousValue.BaseShips.Remove(this);
					}
					this._Weapon.Entity = value;
					if ((value != null))
					{
						value.BaseShips.Add(this);
						this._InitialWeaponId = value.WeaponId;
					}
					else
					{
						this._InitialWeaponId = default(int);
					}
					this.SendPropertyChanged("InitialWeapon");
				}
			}
		}
		
		[Association(Name="JumpDrive_BaseShip", Storage="_JumpDrive", ThisKey="InitialJumpDriveId", IsForeignKey=true)]
		public JumpDrive InitialJumpDrive
		{
			get
			{
				return this._JumpDrive.Entity;
			}
			set
			{
				JumpDrive previousValue = this._JumpDrive.Entity;
				if (((previousValue != value) 
							|| (this._JumpDrive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JumpDrive.Entity = null;
						previousValue.BaseShips.Remove(this);
					}
					this._JumpDrive.Entity = value;
					if ((value != null))
					{
						value.BaseShips.Add(this);
						this._InitialJumpDriveId = value.JumpDriveId;
					}
					else
					{
						this._InitialJumpDriveId = default(int);
					}
					this.SendPropertyChanged("InitialJumpDrive");
				}
			}
		}
		
		[Association(Name="Shield_BaseShip", Storage="_Shield", ThisKey="InitialShieldId", IsForeignKey=true)]
		public Shield InitialShield
		{
			get
			{
				return this._Shield.Entity;
			}
			set
			{
				Shield previousValue = this._Shield.Entity;
				if (((previousValue != value) 
							|| (this._Shield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shield.Entity = null;
						previousValue.BaseShips.Remove(this);
					}
					this._Shield.Entity = value;
					if ((value != null))
					{
						value.BaseShips.Add(this);
						this._InitialShieldId = value.ShieldId;
					}
					else
					{
						this._InitialShieldId = default(int);
					}
					this.SendPropertyChanged("InitialShield");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.BaseShip = this;
		}
		
		private void detach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.BaseShip = null;
		}
		
		private void attach_SystemShips(SystemShip entity)
		{
			this.SendPropertyChanging();
			entity.BaseShip = this;
		}
		
		private void detach_SystemShips(SystemShip entity)
		{
			this.SendPropertyChanging();
			entity.BaseShip = null;
		}
	}
	
	[Table()]
	public partial class Weapon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WeaponId;
		
		private string _Name;
		
		private int _Power;
		
		private int _TurnCost;
		
		private int _CargoCost;
		
		private int _BasePrice;
		
		private EntitySet<BaseShip> _BaseShips;
		
		private EntitySet<Ship> _Ships;
		
		private EntitySet<SystemWeaponUpgrade> _SystemWeaponUpgrades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWeaponIdChanging(int value);
    partial void OnWeaponIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPowerChanging(int value);
    partial void OnPowerChanged();
    partial void OnTurnCostChanging(int value);
    partial void OnTurnCostChanged();
    partial void OnCargoCostChanging(int value);
    partial void OnCargoCostChanged();
    partial void OnBasePriceChanging(int value);
    partial void OnBasePriceChanged();
    #endregion
		
		public Weapon()
		{
			this._BaseShips = new EntitySet<BaseShip>(new Action<BaseShip>(this.attach_BaseShips), new Action<BaseShip>(this.detach_BaseShips));
			this._Ships = new EntitySet<Ship>(new Action<Ship>(this.attach_Ships), new Action<Ship>(this.detach_Ships));
			this._SystemWeaponUpgrades = new EntitySet<SystemWeaponUpgrade>(new Action<SystemWeaponUpgrade>(this.attach_SystemWeaponUpgrades), new Action<SystemWeaponUpgrade>(this.detach_SystemWeaponUpgrades));
			OnCreated();
		}
		
		[Column(Storage="_WeaponId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WeaponId
		{
			get
			{
				return this._WeaponId;
			}
			set
			{
				if ((this._WeaponId != value))
				{
					this.OnWeaponIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponId = value;
					this.SendPropertyChanged("WeaponId");
					this.OnWeaponIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Power", DbType="Int NOT NULL")]
		public int Power
		{
			get
			{
				return this._Power;
			}
			set
			{
				if ((this._Power != value))
				{
					this.OnPowerChanging(value);
					this.SendPropertyChanging();
					this._Power = value;
					this.SendPropertyChanged("Power");
					this.OnPowerChanged();
				}
			}
		}
		
		[Column(Storage="_TurnCost", DbType="Int NOT NULL")]
		public int TurnCost
		{
			get
			{
				return this._TurnCost;
			}
			set
			{
				if ((this._TurnCost != value))
				{
					this.OnTurnCostChanging(value);
					this.SendPropertyChanging();
					this._TurnCost = value;
					this.SendPropertyChanged("TurnCost");
					this.OnTurnCostChanged();
				}
			}
		}
		
		[Column(Storage="_CargoCost", DbType="Int NOT NULL")]
		public int CargoCost
		{
			get
			{
				return this._CargoCost;
			}
			set
			{
				if ((this._CargoCost != value))
				{
					this.OnCargoCostChanging(value);
					this.SendPropertyChanging();
					this._CargoCost = value;
					this.SendPropertyChanged("CargoCost");
					this.OnCargoCostChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int NOT NULL")]
		public int BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Association(Name="Weapon_BaseShip", Storage="_BaseShips", OtherKey="InitialWeaponId")]
		public EntitySet<BaseShip> BaseShips
		{
			get
			{
				return this._BaseShips;
			}
			set
			{
				this._BaseShips.Assign(value);
			}
		}
		
		[Association(Name="Weapon_Ship", Storage="_Ships", OtherKey="WeaponId")]
		public EntitySet<Ship> Ships
		{
			get
			{
				return this._Ships;
			}
			set
			{
				this._Ships.Assign(value);
			}
		}
		
		[Association(Name="Weapon_SystemWeaponUpgrade", Storage="_SystemWeaponUpgrades", OtherKey="WeaponId")]
		public EntitySet<SystemWeaponUpgrade> SystemWeaponUpgrades
		{
			get
			{
				return this._SystemWeaponUpgrades;
			}
			set
			{
				this._SystemWeaponUpgrades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialWeapon = this;
		}
		
		private void detach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialWeapon = null;
		}
		
		private void attach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.Weapon = this;
		}
		
		private void detach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.Weapon = null;
		}
		
		private void attach_SystemWeaponUpgrades(SystemWeaponUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.Weapon = this;
		}
		
		private void detach_SystemWeaponUpgrades(SystemWeaponUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.Weapon = null;
		}
	}
	
	[Table()]
	public partial class BuddyList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _FriendId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFriendIdChanging(int value);
    partial void OnFriendIdChanged();
    #endregion
		
		public BuddyList()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_FriendId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FriendId
		{
			get
			{
				return this._FriendId;
			}
			set
			{
				if ((this._FriendId != value))
				{
					this.OnFriendIdChanging(value);
					this.SendPropertyChanging();
					this._FriendId = value;
					this.SendPropertyChanged("FriendId");
					this.OnFriendIdChanged();
				}
			}
		}
		
		[Association(Name="User_BuddyList", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BuddyLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BuddyLists.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GoodId;
		
		private string _Name;
		
		private int _BasePrice;
		
		private bool _Contraband;
		
		private int _TargetCount;
		
		private EntitySet<ShipGood> _ShipGoods;
		
		private EntitySet<SystemGood> _SystemGoods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGoodIdChanging(int value);
    partial void OnGoodIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBasePriceChanging(int value);
    partial void OnBasePriceChanged();
    partial void OnContrabandChanging(bool value);
    partial void OnContrabandChanged();
    partial void OnTargetCountChanging(int value);
    partial void OnTargetCountChanged();
    #endregion
		
		public Good()
		{
			this._ShipGoods = new EntitySet<ShipGood>(new Action<ShipGood>(this.attach_ShipGoods), new Action<ShipGood>(this.detach_ShipGoods));
			this._SystemGoods = new EntitySet<SystemGood>(new Action<SystemGood>(this.attach_SystemGoods), new Action<SystemGood>(this.detach_SystemGoods));
			OnCreated();
		}
		
		[Column(Storage="_GoodId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GoodId
		{
			get
			{
				return this._GoodId;
			}
			set
			{
				if ((this._GoodId != value))
				{
					this.OnGoodIdChanging(value);
					this.SendPropertyChanging();
					this._GoodId = value;
					this.SendPropertyChanged("GoodId");
					this.OnGoodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int NOT NULL")]
		public int BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_Contraband", DbType="Bit NOT NULL")]
		public bool Contraband
		{
			get
			{
				return this._Contraband;
			}
			set
			{
				if ((this._Contraband != value))
				{
					this.OnContrabandChanging(value);
					this.SendPropertyChanging();
					this._Contraband = value;
					this.SendPropertyChanged("Contraband");
					this.OnContrabandChanged();
				}
			}
		}
		
		[Column(Storage="_TargetCount", DbType="int NOT NULL")]
		public int TargetCount
		{
			get
			{
				return this._TargetCount;
			}
			set
			{
				if ((this._TargetCount != value))
				{
					this.OnTargetCountChanging(value);
					this.SendPropertyChanging();
					this._TargetCount = value;
					this.SendPropertyChanged("TargetCount");
					this.OnTargetCountChanged();
				}
			}
		}
		
		[Association(Name="Good_ShipGood", Storage="_ShipGoods", OtherKey="GoodId")]
		public EntitySet<ShipGood> ShipGoods
		{
			get
			{
				return this._ShipGoods;
			}
			set
			{
				this._ShipGoods.Assign(value);
			}
		}
		
		[Association(Name="Good_SystemGood", Storage="_SystemGoods", OtherKey="GoodId")]
		public EntitySet<SystemGood> SystemGoods
		{
			get
			{
				return this._SystemGoods;
			}
			set
			{
				this._SystemGoods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShipGoods(ShipGood entity)
		{
			this.SendPropertyChanging();
			entity.Good = this;
		}
		
		private void detach_ShipGoods(ShipGood entity)
		{
			this.SendPropertyChanging();
			entity.Good = null;
		}
		
		private void attach_SystemGoods(SystemGood entity)
		{
			this.SendPropertyChanging();
			entity.Good = this;
		}
		
		private void detach_SystemGoods(SystemGood entity)
		{
			this.SendPropertyChanging();
			entity.Good = null;
		}
	}
	
	[Table()]
	public partial class IgnoreList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _AntiFriendId;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnAntiFriendIdChanging(int value);
    partial void OnAntiFriendIdChanged();
    #endregion
		
		public IgnoreList()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_AntiFriendId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AntiFriendId
		{
			get
			{
				return this._AntiFriendId;
			}
			set
			{
				if ((this._AntiFriendId != value))
				{
					this.OnAntiFriendIdChanging(value);
					this.SendPropertyChanging();
					this._AntiFriendId = value;
					this.SendPropertyChanged("AntiFriendId");
					this.OnAntiFriendIdChanged();
				}
			}
		}
		
		[Association(Name="User_IgnoreList", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IgnoreLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IgnoreLists.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class InProgressCombat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttackerShipId;
		
		private int _DefenderShipId;
		
		private int _Turn;
		
		private int _TurnPointsLeft;
		
		private bool _Surrender;
		
		private bool _JettisonCargo;
		
		private EntityRef<Ship> _Ship;
		
		private EntityRef<Ship> _Ship1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttackerShipIdChanging(int value);
    partial void OnAttackerShipIdChanged();
    partial void OnDefenderShipIdChanging(int value);
    partial void OnDefenderShipIdChanged();
    partial void OnTurnChanging(int value);
    partial void OnTurnChanged();
    partial void OnTurnPointsLeftChanging(int value);
    partial void OnTurnPointsLeftChanged();
    partial void OnSurrenderChanging(bool value);
    partial void OnSurrenderChanged();
    partial void OnJettisonCargoChanging(bool value);
    partial void OnJettisonCargoChanged();
    #endregion
		
		public InProgressCombat()
		{
			this._Ship = default(EntityRef<Ship>);
			this._Ship1 = default(EntityRef<Ship>);
			OnCreated();
		}
		
		[Column(Storage="_AttackerShipId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttackerShipId
		{
			get
			{
				return this._AttackerShipId;
			}
			set
			{
				if ((this._AttackerShipId != value))
				{
					if (this._Ship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttackerShipIdChanging(value);
					this.SendPropertyChanging();
					this._AttackerShipId = value;
					this.SendPropertyChanged("AttackerShipId");
					this.OnAttackerShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_DefenderShipId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DefenderShipId
		{
			get
			{
				return this._DefenderShipId;
			}
			set
			{
				if ((this._DefenderShipId != value))
				{
					if (this._Ship1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefenderShipIdChanging(value);
					this.SendPropertyChanging();
					this._DefenderShipId = value;
					this.SendPropertyChanged("DefenderShipId");
					this.OnDefenderShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_Turn", DbType="Int NOT NULL")]
		public int Turn
		{
			get
			{
				return this._Turn;
			}
			set
			{
				if ((this._Turn != value))
				{
					this.OnTurnChanging(value);
					this.SendPropertyChanging();
					this._Turn = value;
					this.SendPropertyChanged("Turn");
					this.OnTurnChanged();
				}
			}
		}
		
		[Column(Storage="_TurnPointsLeft", DbType="Int NOT NULL")]
		public int TurnPointsLeft
		{
			get
			{
				return this._TurnPointsLeft;
			}
			set
			{
				if ((this._TurnPointsLeft != value))
				{
					this.OnTurnPointsLeftChanging(value);
					this.SendPropertyChanging();
					this._TurnPointsLeft = value;
					this.SendPropertyChanged("TurnPointsLeft");
					this.OnTurnPointsLeftChanged();
				}
			}
		}
		
		[Column(Storage="_Surrender", DbType="Bit NOT NULL")]
		public bool Surrender
		{
			get
			{
				return this._Surrender;
			}
			set
			{
				if ((this._Surrender != value))
				{
					this.OnSurrenderChanging(value);
					this.SendPropertyChanging();
					this._Surrender = value;
					this.SendPropertyChanged("Surrender");
					this.OnSurrenderChanged();
				}
			}
		}
		
		[Column(Storage="_JettisonCargo", DbType="Bit NOT NULL")]
		public bool JettisonCargo
		{
			get
			{
				return this._JettisonCargo;
			}
			set
			{
				if ((this._JettisonCargo != value))
				{
					this.OnJettisonCargoChanging(value);
					this.SendPropertyChanging();
					this._JettisonCargo = value;
					this.SendPropertyChanged("JettisonCargo");
					this.OnJettisonCargoChanged();
				}
			}
		}
		
		[Association(Name="Ship_InProgressCombat", Storage="_Ship", ThisKey="AttackerShipId", IsForeignKey=true)]
		public Ship Ship
		{
			get
			{
				return this._Ship.Entity;
			}
			set
			{
				Ship previousValue = this._Ship.Entity;
				if (((previousValue != value) 
							|| (this._Ship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship.Entity = null;
						previousValue.InProgressCombats.Remove(this);
					}
					this._Ship.Entity = value;
					if ((value != null))
					{
						value.InProgressCombats.Add(this);
						this._AttackerShipId = value.ShipId;
					}
					else
					{
						this._AttackerShipId = default(int);
					}
					this.SendPropertyChanged("Ship");
				}
			}
		}
		
		[Association(Name="Ship_InProgressCombat1", Storage="_Ship1", ThisKey="DefenderShipId", IsForeignKey=true)]
		public Ship Ship1
		{
			get
			{
				return this._Ship1.Entity;
			}
			set
			{
				Ship previousValue = this._Ship1.Entity;
				if (((previousValue != value) 
							|| (this._Ship1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship1.Entity = null;
						previousValue.InProgressCombats1.Remove(this);
					}
					this._Ship1.Entity = value;
					if ((value != null))
					{
						value.InProgressCombats1.Add(this);
						this._DefenderShipId = value.ShipId;
					}
					else
					{
						this._DefenderShipId = default(int);
					}
					this.SendPropertyChanged("Ship1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class JumpDrive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _JumpDriveId;
		
		private string _Name;
		
		private int _Speed;
		
		private int _Range;
		
		private int _CargoCost;
		
		private int _BasePrice;
		
		private EntitySet<BaseShip> _BaseShips;
		
		private EntitySet<Ship> _Ships;
		
		private EntitySet<SystemJumpDriveUpgrade> _SystemJumpDriveUpgrades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJumpDriveIdChanging(int value);
    partial void OnJumpDriveIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpeedChanging(int value);
    partial void OnSpeedChanged();
    partial void OnRangeChanging(int value);
    partial void OnRangeChanged();
    partial void OnCargoCostChanging(int value);
    partial void OnCargoCostChanged();
    partial void OnBasePriceChanging(int value);
    partial void OnBasePriceChanged();
    #endregion
		
		public JumpDrive()
		{
			this._BaseShips = new EntitySet<BaseShip>(new Action<BaseShip>(this.attach_BaseShips), new Action<BaseShip>(this.detach_BaseShips));
			this._Ships = new EntitySet<Ship>(new Action<Ship>(this.attach_Ships), new Action<Ship>(this.detach_Ships));
			this._SystemJumpDriveUpgrades = new EntitySet<SystemJumpDriveUpgrade>(new Action<SystemJumpDriveUpgrade>(this.attach_SystemJumpDriveUpgrades), new Action<SystemJumpDriveUpgrade>(this.detach_SystemJumpDriveUpgrades));
			OnCreated();
		}
		
		[Column(Storage="_JumpDriveId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int JumpDriveId
		{
			get
			{
				return this._JumpDriveId;
			}
			set
			{
				if ((this._JumpDriveId != value))
				{
					this.OnJumpDriveIdChanging(value);
					this.SendPropertyChanging();
					this._JumpDriveId = value;
					this.SendPropertyChanged("JumpDriveId");
					this.OnJumpDriveIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Speed", DbType="Int NOT NULL")]
		public int Speed
		{
			get
			{
				return this._Speed;
			}
			set
			{
				if ((this._Speed != value))
				{
					this.OnSpeedChanging(value);
					this.SendPropertyChanging();
					this._Speed = value;
					this.SendPropertyChanged("Speed");
					this.OnSpeedChanged();
				}
			}
		}
		
		[Column(Storage="_Range", DbType="Int NOT NULL")]
		public virtual int Range
		{
			get
			{
				return this._Range;
			}
			set
			{
				if ((this._Range != value))
				{
					this.OnRangeChanging(value);
					this.SendPropertyChanging();
					this._Range = value;
					this.SendPropertyChanged("Range");
					this.OnRangeChanged();
				}
			}
		}
		
		[Column(Storage="_CargoCost", DbType="Int NOT NULL")]
		public int CargoCost
		{
			get
			{
				return this._CargoCost;
			}
			set
			{
				if ((this._CargoCost != value))
				{
					this.OnCargoCostChanging(value);
					this.SendPropertyChanging();
					this._CargoCost = value;
					this.SendPropertyChanged("CargoCost");
					this.OnCargoCostChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int NOT NULL")]
		public int BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Association(Name="JumpDrive_BaseShip", Storage="_BaseShips", OtherKey="InitialJumpDriveId")]
		public EntitySet<BaseShip> BaseShips
		{
			get
			{
				return this._BaseShips;
			}
			set
			{
				this._BaseShips.Assign(value);
			}
		}
		
		[Association(Name="JumpDrive_Ship", Storage="_Ships", OtherKey="JumpDriveId")]
		public EntitySet<Ship> Ships
		{
			get
			{
				return this._Ships;
			}
			set
			{
				this._Ships.Assign(value);
			}
		}
		
		[Association(Name="JumpDrive_SystemJumpDriveUpgrade", Storage="_SystemJumpDriveUpgrades", OtherKey="JumpDriveId")]
		public EntitySet<SystemJumpDriveUpgrade> SystemJumpDriveUpgrades
		{
			get
			{
				return this._SystemJumpDriveUpgrades;
			}
			set
			{
				this._SystemJumpDriveUpgrades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialJumpDrive = this;
		}
		
		private void detach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialJumpDrive = null;
		}
		
		private void attach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.JumpDrive = this;
		}
		
		private void detach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.JumpDrive = null;
		}
		
		private void attach_SystemJumpDriveUpgrades(SystemJumpDriveUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.JumpDrive = this;
		}
		
		private void detach_SystemJumpDriveUpgrades(SystemJumpDriveUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.JumpDrive = null;
		}
	}
	
	[Table()]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private int _RecipientUserId;
		
		private int _SenderUserId;
		
		private string _Content;
		
		private System.DateTime _Time;
		
		private bool _Read;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnRecipientUserIdChanging(int value);
    partial void OnRecipientUserIdChanged();
    partial void OnSenderUserIdChanging(int value);
    partial void OnSenderUserIdChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnReceivedChanging(bool value);
    partial void OnReceivedChanged();
    #endregion
		
		public Message()
		{
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientUserId", DbType="Int NOT NULL")]
		public int RecipientUserId
		{
			get
			{
				return this._RecipientUserId;
			}
			set
			{
				if ((this._RecipientUserId != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientUserIdChanging(value);
					this.SendPropertyChanging();
					this._RecipientUserId = value;
					this.SendPropertyChanged("RecipientUserId");
					this.OnRecipientUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_SenderUserId", DbType="Int NOT NULL")]
		public int SenderUserId
		{
			get
			{
				return this._SenderUserId;
			}
			set
			{
				if ((this._SenderUserId != value))
				{
					this.OnSenderUserIdChanging(value);
					this.SendPropertyChanging();
					this._SenderUserId = value;
					this.SendPropertyChanged("SenderUserId");
					this.OnSenderUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Read", DbType="Bit NOT NULL")]
		public bool Received
		{
			get
			{
				return this._Read;
			}
			set
			{
				if ((this._Read != value))
				{
					this.OnReceivedChanging(value);
					this.SendPropertyChanging();
					this._Read = value;
					this.SendPropertyChanged("Received");
					this.OnReceivedChanged();
				}
			}
		}
		
		[Association(Name="User_Message", Storage="_User1", ThisKey="RecipientUserId", IsForeignKey=true)]
		public User RecipientUser
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._RecipientUserId = value.UserId;
					}
					else
					{
						this._RecipientUserId = default(int);
					}
					this.SendPropertyChanged("RecipientUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Npc : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NpcId;
		
		private int _NpcTypeId;
		
		private string _Name;
		
		private System.Nullable<int> _RaceId;
		
		private System.Nullable<int> _ShipId;
		
		private int _Credits;
		
		private System.Nullable<int> _Badness;
		
		private System.Nullable<int> _Bounty;
		
		private System.DateTime _LastActionTime;
		
		private EntityRef<NpcType> _NpcType;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<Ship> _Ship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNpcIdChanging(int value);
    partial void OnNpcIdChanged();
    partial void OnNpcTypeIdChanging(int value);
    partial void OnNpcTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceIdChanging(System.Nullable<int> value);
    partial void OnRaceIdChanged();
    partial void OnShipIdChanging(System.Nullable<int> value);
    partial void OnShipIdChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    partial void OnBadnessChanging(System.Nullable<int> value);
    partial void OnBadnessChanged();
    partial void OnBountyChanging(System.Nullable<int> value);
    partial void OnBountyChanged();
    partial void OnNextActionTimeChanging(System.DateTime value);
    partial void OnNextActionTimeChanged();
    #endregion
		
		public Npc()
		{
			this._NpcType = default(EntityRef<NpcType>);
			this._Race = default(EntityRef<Race>);
			this._Ship = default(EntityRef<Ship>);
			OnCreated();
		}
		
		[Column(Storage="_NpcId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NpcId
		{
			get
			{
				return this._NpcId;
			}
			set
			{
				if ((this._NpcId != value))
				{
					this.OnNpcIdChanging(value);
					this.SendPropertyChanging();
					this._NpcId = value;
					this.SendPropertyChanged("NpcId");
					this.OnNpcIdChanged();
				}
			}
		}
		
		[Column(Storage="_NpcTypeId", DbType="Int NOT NULL")]
		public int NpcTypeId
		{
			get
			{
				return this._NpcTypeId;
			}
			set
			{
				if ((this._NpcTypeId != value))
				{
					if (this._NpcType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNpcTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NpcTypeId = value;
					this.SendPropertyChanged("NpcTypeId");
					this.OnNpcTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RaceId", DbType="Int")]
		public System.Nullable<int> RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShipId", DbType="Int")]
		public System.Nullable<int> ShipId
		{
			get
			{
				return this._ShipId;
			}
			set
			{
				if ((this._ShipId != value))
				{
					if (this._Ship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipIdChanging(value);
					this.SendPropertyChanging();
					this._ShipId = value;
					this.SendPropertyChanged("ShipId");
					this.OnShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_Credits", DbType="Int NOT NULL")]
		public int Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_Badness", DbType="Int")]
		public System.Nullable<int> Badness
		{
			get
			{
				return this._Badness;
			}
			set
			{
				if ((this._Badness != value))
				{
					this.OnBadnessChanging(value);
					this.SendPropertyChanging();
					this._Badness = value;
					this.SendPropertyChanged("Badness");
					this.OnBadnessChanged();
				}
			}
		}
		
		[Column(Storage="_Bounty", DbType="Int")]
		public System.Nullable<int> Bounty
		{
			get
			{
				return this._Bounty;
			}
			set
			{
				if ((this._Bounty != value))
				{
					this.OnBountyChanging(value);
					this.SendPropertyChanging();
					this._Bounty = value;
					this.SendPropertyChanged("Bounty");
					this.OnBountyChanged();
				}
			}
		}
		
		[Column(Storage="_LastActionTime", DbType="datetime NOT NULL")]
		public System.DateTime NextActionTime
		{
			get
			{
				return this._LastActionTime;
			}
			set
			{
				if ((this._LastActionTime != value))
				{
					this.OnNextActionTimeChanging(value);
					this.SendPropertyChanging();
					this._LastActionTime = value;
					this.SendPropertyChanged("NextActionTime");
					this.OnNextActionTimeChanged();
				}
			}
		}
		
		[Association(Name="NpcType_Npc", Storage="_NpcType", ThisKey="NpcTypeId", IsForeignKey=true)]
		public NpcType NpcType
		{
			get
			{
				return this._NpcType.Entity;
			}
			set
			{
				NpcType previousValue = this._NpcType.Entity;
				if (((previousValue != value) 
							|| (this._NpcType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NpcType.Entity = null;
						previousValue.Npcs.Remove(this);
					}
					this._NpcType.Entity = value;
					if ((value != null))
					{
						value.Npcs.Add(this);
						this._NpcTypeId = value.NpcTypeId;
					}
					else
					{
						this._NpcTypeId = default(int);
					}
					this.SendPropertyChanged("NpcType");
				}
			}
		}
		
		[Association(Name="Race_Npc", Storage="_Race", ThisKey="RaceId", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.Npcs.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.Npcs.Add(this);
						this._RaceId = value.RaceId;
					}
					else
					{
						this._RaceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[Association(Name="Ship_Npc", Storage="_Ship", ThisKey="ShipId", IsForeignKey=true)]
		public Ship Ship
		{
			get
			{
				return this._Ship.Entity;
			}
			set
			{
				Ship previousValue = this._Ship.Entity;
				if (((previousValue != value) 
							|| (this._Ship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship.Entity = null;
						previousValue.Npcs.Remove(this);
					}
					this._Ship.Entity = value;
					if ((value != null))
					{
						value.Npcs.Add(this);
						this._ShipId = value.ShipId;
					}
					else
					{
						this._ShipId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class NpcType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NpcTypeId;
		
		private string _Name;
		
		private EntitySet<Npc> _Npcs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNpcTypeIdChanging(int value);
    partial void OnNpcTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NpcType()
		{
			this._Npcs = new EntitySet<Npc>(new Action<Npc>(this.attach_Npcs), new Action<Npc>(this.detach_Npcs));
			OnCreated();
		}
		
		[Column(Storage="_NpcTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NpcTypeId
		{
			get
			{
				return this._NpcTypeId;
			}
			set
			{
				if ((this._NpcTypeId != value))
				{
					this.OnNpcTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NpcTypeId = value;
					this.SendPropertyChanged("NpcTypeId");
					this.OnNpcTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="NpcType_Npc", Storage="_Npcs", OtherKey="NpcTypeId")]
		public EntitySet<Npc> Npcs
		{
			get
			{
				return this._Npcs;
			}
			set
			{
				this._Npcs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.NpcType = this;
		}
		
		private void detach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.NpcType = null;
		}
	}
	
	[Table()]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PlayerId;
		
		private int _UserId;
		
		private string _Name;
		
		private int _RaceId;
		
		private int _Reputation;
		
		private int _ShipId;
		
		private int _BankCredits;
		
		private int _CashCredits;
		
		private double _TimePlayed;
		
		private System.DateTime _LastPlayed;
		
		private int _NetWorth;
		
		private int _BountyTotal;
		
		private int _HighestBounty;
		
		private int _ShipsDestroyed;
		
		private int _ForcedSurrenders;
		
		private int _ForcedFlees;
		
		private int _CargoLootedWorth;
		
		private int _ShipsLost;
		
		private int _SurrenderCount;
		
		private int _FleeCount;
		
		private int _CargoLostWorth;
		
		private bool _Alive;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<Ship> _Ship;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRaceIdChanging(int value);
    partial void OnRaceIdChanged();
    partial void OnReputationChanging(int value);
    partial void OnReputationChanged();
    partial void OnShipIdChanging(int value);
    partial void OnShipIdChanged();
    partial void OnBankCreditsChanging(int value);
    partial void OnBankCreditsChanged();
    partial void OnCashCreditsChanging(int value);
    partial void OnCashCreditsChanged();
    partial void OnTimePlayedChanging(double value);
    partial void OnTimePlayedChanged();
    partial void OnLastPlayedChanging(System.DateTime value);
    partial void OnLastPlayedChanged();
    partial void OnNetWorthChanging(int value);
    partial void OnNetWorthChanged();
    partial void OnBountyTotalChanging(int value);
    partial void OnBountyTotalChanged();
    partial void OnHighestBountyChanging(int value);
    partial void OnHighestBountyChanged();
    partial void OnShipsDestroyedChanging(int value);
    partial void OnShipsDestroyedChanged();
    partial void OnForcedSurrendersChanging(int value);
    partial void OnForcedSurrendersChanged();
    partial void OnForcedFleesChanging(int value);
    partial void OnForcedFleesChanged();
    partial void OnCargoLootedWorthChanging(int value);
    partial void OnCargoLootedWorthChanged();
    partial void OnShipsLostChanging(int value);
    partial void OnShipsLostChanged();
    partial void OnSurrenderCountChanging(int value);
    partial void OnSurrenderCountChanged();
    partial void OnFleeCountChanging(int value);
    partial void OnFleeCountChanged();
    partial void OnCargoLostWorthChanging(int value);
    partial void OnCargoLostWorthChanged();
    partial void OnAliveChanging(bool value);
    partial void OnAliveChanged();
    #endregion
		
		public Player()
		{
			this._Race = default(EntityRef<Race>);
			this._Ship = default(EntityRef<Ship>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PlayerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public virtual int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public virtual int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public virtual string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_RaceId", DbType="Int NOT NULL")]
		public virtual int RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Reputation", DbType="Int NOT NULL")]
		public virtual int Reputation
		{
			get
			{
				return this._Reputation;
			}
			set
			{
				if ((this._Reputation != value))
				{
					this.OnReputationChanging(value);
					this.SendPropertyChanging();
					this._Reputation = value;
					this.SendPropertyChanged("Reputation");
					this.OnReputationChanged();
				}
			}
		}
		
		[Column(Storage="_ShipId", DbType="Int NOT NULL")]
		public virtual int ShipId
		{
			get
			{
				return this._ShipId;
			}
			set
			{
				if ((this._ShipId != value))
				{
					if (this._Ship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipIdChanging(value);
					this.SendPropertyChanging();
					this._ShipId = value;
					this.SendPropertyChanged("ShipId");
					this.OnShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_BankCredits", DbType="Int NOT NULL")]
		public virtual int BankCredits
		{
			get
			{
				return this._BankCredits;
			}
			set
			{
				if ((this._BankCredits != value))
				{
					this.OnBankCreditsChanging(value);
					this.SendPropertyChanging();
					this._BankCredits = value;
					this.SendPropertyChanged("BankCredits");
					this.OnBankCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_CashCredits", DbType="Int NOT NULL")]
		public virtual int CashCredits
		{
			get
			{
				return this._CashCredits;
			}
			set
			{
				if ((this._CashCredits != value))
				{
					this.OnCashCreditsChanging(value);
					this.SendPropertyChanging();
					this._CashCredits = value;
					this.SendPropertyChanged("CashCredits");
					this.OnCashCreditsChanged();
				}
			}
		}
		
		[Column(Storage="_TimePlayed", DbType="float NOT NULL")]
		public virtual double TimePlayed
		{
			get
			{
				return this._TimePlayed;
			}
			set
			{
				if ((this._TimePlayed != value))
				{
					this.OnTimePlayedChanging(value);
					this.SendPropertyChanging();
					this._TimePlayed = value;
					this.SendPropertyChanged("TimePlayed");
					this.OnTimePlayedChanged();
				}
			}
		}
		
		[Column(Storage="_LastPlayed", DbType="DateTime NOT NULL")]
		public virtual System.DateTime LastPlayed
		{
			get
			{
				return this._LastPlayed;
			}
			set
			{
				if ((this._LastPlayed != value))
				{
					this.OnLastPlayedChanging(value);
					this.SendPropertyChanging();
					this._LastPlayed = value;
					this.SendPropertyChanged("LastPlayed");
					this.OnLastPlayedChanged();
				}
			}
		}
		
		[Column(Storage="_NetWorth", DbType="Int NOT NULL")]
		public virtual int NetWorth
		{
			get
			{
				return this._NetWorth;
			}
			set
			{
				if ((this._NetWorth != value))
				{
					this.OnNetWorthChanging(value);
					this.SendPropertyChanging();
					this._NetWorth = value;
					this.SendPropertyChanged("NetWorth");
					this.OnNetWorthChanged();
				}
			}
		}
		
		[Column(Storage="_BountyTotal", DbType="Int NOT NULL")]
		public virtual int BountyTotal
		{
			get
			{
				return this._BountyTotal;
			}
			set
			{
				if ((this._BountyTotal != value))
				{
					this.OnBountyTotalChanging(value);
					this.SendPropertyChanging();
					this._BountyTotal = value;
					this.SendPropertyChanged("BountyTotal");
					this.OnBountyTotalChanged();
				}
			}
		}
		
		[Column(Storage="_HighestBounty", DbType="Int NOT NULL")]
		public virtual int HighestBounty
		{
			get
			{
				return this._HighestBounty;
			}
			set
			{
				if ((this._HighestBounty != value))
				{
					this.OnHighestBountyChanging(value);
					this.SendPropertyChanging();
					this._HighestBounty = value;
					this.SendPropertyChanged("HighestBounty");
					this.OnHighestBountyChanged();
				}
			}
		}
		
		[Column(Storage="_ShipsDestroyed", DbType="Int NOT NULL")]
		public virtual int ShipsDestroyed
		{
			get
			{
				return this._ShipsDestroyed;
			}
			set
			{
				if ((this._ShipsDestroyed != value))
				{
					this.OnShipsDestroyedChanging(value);
					this.SendPropertyChanging();
					this._ShipsDestroyed = value;
					this.SendPropertyChanged("ShipsDestroyed");
					this.OnShipsDestroyedChanged();
				}
			}
		}
		
		[Column(Storage="_ForcedSurrenders", DbType="Int NOT NULL")]
		public virtual int ForcedSurrenders
		{
			get
			{
				return this._ForcedSurrenders;
			}
			set
			{
				if ((this._ForcedSurrenders != value))
				{
					this.OnForcedSurrendersChanging(value);
					this.SendPropertyChanging();
					this._ForcedSurrenders = value;
					this.SendPropertyChanged("ForcedSurrenders");
					this.OnForcedSurrendersChanged();
				}
			}
		}
		
		[Column(Storage="_ForcedFlees", DbType="Int NOT NULL")]
		public virtual int ForcedFlees
		{
			get
			{
				return this._ForcedFlees;
			}
			set
			{
				if ((this._ForcedFlees != value))
				{
					this.OnForcedFleesChanging(value);
					this.SendPropertyChanging();
					this._ForcedFlees = value;
					this.SendPropertyChanged("ForcedFlees");
					this.OnForcedFleesChanged();
				}
			}
		}
		
		[Column(Storage="_CargoLootedWorth", DbType="Int NOT NULL")]
		public virtual int CargoLootedWorth
		{
			get
			{
				return this._CargoLootedWorth;
			}
			set
			{
				if ((this._CargoLootedWorth != value))
				{
					this.OnCargoLootedWorthChanging(value);
					this.SendPropertyChanging();
					this._CargoLootedWorth = value;
					this.SendPropertyChanged("CargoLootedWorth");
					this.OnCargoLootedWorthChanged();
				}
			}
		}
		
		[Column(Storage="_ShipsLost", DbType="Int NOT NULL")]
		public virtual int ShipsLost
		{
			get
			{
				return this._ShipsLost;
			}
			set
			{
				if ((this._ShipsLost != value))
				{
					this.OnShipsLostChanging(value);
					this.SendPropertyChanging();
					this._ShipsLost = value;
					this.SendPropertyChanged("ShipsLost");
					this.OnShipsLostChanged();
				}
			}
		}
		
		[Column(Storage="_SurrenderCount", DbType="Int NOT NULL")]
		public virtual int SurrenderCount
		{
			get
			{
				return this._SurrenderCount;
			}
			set
			{
				if ((this._SurrenderCount != value))
				{
					this.OnSurrenderCountChanging(value);
					this.SendPropertyChanging();
					this._SurrenderCount = value;
					this.SendPropertyChanged("SurrenderCount");
					this.OnSurrenderCountChanged();
				}
			}
		}
		
		[Column(Storage="_FleeCount", DbType="Int NOT NULL")]
		public virtual int FleeCount
		{
			get
			{
				return this._FleeCount;
			}
			set
			{
				if ((this._FleeCount != value))
				{
					this.OnFleeCountChanging(value);
					this.SendPropertyChanging();
					this._FleeCount = value;
					this.SendPropertyChanged("FleeCount");
					this.OnFleeCountChanged();
				}
			}
		}
		
		[Column(Storage="_CargoLostWorth", DbType="Int NOT NULL")]
		public virtual int CargoLostWorth
		{
			get
			{
				return this._CargoLostWorth;
			}
			set
			{
				if ((this._CargoLostWorth != value))
				{
					this.OnCargoLostWorthChanging(value);
					this.SendPropertyChanging();
					this._CargoLostWorth = value;
					this.SendPropertyChanged("CargoLostWorth");
					this.OnCargoLostWorthChanged();
				}
			}
		}
		
		[Column(Storage="_Alive", DbType="Bit NOT NULL")]
		public virtual bool Alive
		{
			get
			{
				return this._Alive;
			}
			set
			{
				if ((this._Alive != value))
				{
					this.OnAliveChanging(value);
					this.SendPropertyChanging();
					this._Alive = value;
					this.SendPropertyChanged("Alive");
					this.OnAliveChanged();
				}
			}
		}
		
		[Association(Name="Race_Player", Storage="_Race", ThisKey="RaceId", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._RaceId = value.RaceId;
					}
					else
					{
						this._RaceId = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[Association(Name="Ship_Player", Storage="_Ship", ThisKey="ShipId", IsForeignKey=true)]
		public virtual Ship Ship
		{
			get
			{
				return this._Ship.Entity;
			}
			set
			{
				Ship previousValue = this._Ship.Entity;
				if (((previousValue != value) 
							|| (this._Ship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Ship.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._ShipId = value.ShipId;
					}
					else
					{
						this._ShipId = default(int);
					}
					this.SendPropertyChanged("Ship");
				}
			}
		}
		
		[Association(Name="User_Player", Storage="_User", ThisKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceId;
		
		private string _Name;
		
		private int _Weapons;
		
		private int _Shields;
		
		private int _Engine;
		
		private int _Accuracy;
		
		private int _HomeSystem;
		
		private string _Description;
		
		private int _RacialEnemyId;
		
		private System.Nullable<int> _RacialPreferenceId;
		
		private EntitySet<Npc> _Npcs;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<Race> _Races;
		
		private EntitySet<Race> _Races1;
		
		private EntitySet<CosmoSystem> _CosmoSystems;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
		private EntityRef<Race> _RacialEnemy;
		
		private EntityRef<Race> _RacialPreference;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceIdChanging(int value);
    partial void OnRaceIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWeaponsChanging(int value);
    partial void OnWeaponsChanged();
    partial void OnShieldsChanging(int value);
    partial void OnShieldsChanged();
    partial void OnEngineChanging(int value);
    partial void OnEngineChanged();
    partial void OnAccuracyChanging(int value);
    partial void OnAccuracyChanged();
    partial void OnHomeSystemIdChanging(int value);
    partial void OnHomeSystemIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRacialEnemyIdChanging(int value);
    partial void OnRacialEnemyIdChanged();
    partial void OnRacialPreferenceIdChanging(System.Nullable<int> value);
    partial void OnRacialPreferenceIdChanged();
    #endregion
		
		public Race()
		{
			this._Npcs = new EntitySet<Npc>(new Action<Npc>(this.attach_Npcs), new Action<Npc>(this.detach_Npcs));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._Races = new EntitySet<Race>(new Action<Race>(this.attach_Races), new Action<Race>(this.detach_Races));
			this._Races1 = new EntitySet<Race>(new Action<Race>(this.attach_Races1), new Action<Race>(this.detach_Races1));
			this._CosmoSystems = new EntitySet<CosmoSystem>(new Action<CosmoSystem>(this.attach_CosmoSystems), new Action<CosmoSystem>(this.detach_CosmoSystems));
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			this._RacialEnemy = default(EntityRef<Race>);
			this._RacialPreference = default(EntityRef<Race>);
			OnCreated();
		}
		
		[Column(Storage="_RaceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Weapons", DbType="Int NOT NULL")]
		public int Weapons
		{
			get
			{
				return this._Weapons;
			}
			set
			{
				if ((this._Weapons != value))
				{
					this.OnWeaponsChanging(value);
					this.SendPropertyChanging();
					this._Weapons = value;
					this.SendPropertyChanged("Weapons");
					this.OnWeaponsChanged();
				}
			}
		}
		
		[Column(Storage="_Shields", DbType="Int NOT NULL")]
		public int Shields
		{
			get
			{
				return this._Shields;
			}
			set
			{
				if ((this._Shields != value))
				{
					this.OnShieldsChanging(value);
					this.SendPropertyChanging();
					this._Shields = value;
					this.SendPropertyChanged("Shields");
					this.OnShieldsChanged();
				}
			}
		}
		
		[Column(Storage="_Engine", DbType="Int NOT NULL")]
		public int Engine
		{
			get
			{
				return this._Engine;
			}
			set
			{
				if ((this._Engine != value))
				{
					this.OnEngineChanging(value);
					this.SendPropertyChanging();
					this._Engine = value;
					this.SendPropertyChanged("Engine");
					this.OnEngineChanged();
				}
			}
		}
		
		[Column(Storage="_Accuracy", DbType="Int NOT NULL")]
		public int Accuracy
		{
			get
			{
				return this._Accuracy;
			}
			set
			{
				if ((this._Accuracy != value))
				{
					this.OnAccuracyChanging(value);
					this.SendPropertyChanging();
					this._Accuracy = value;
					this.SendPropertyChanged("Accuracy");
					this.OnAccuracyChanged();
				}
			}
		}
		
		[Column(Storage="_HomeSystem", DbType="Int NOT NULL")]
		public int HomeSystemId
		{
			get
			{
				return this._HomeSystem;
			}
			set
			{
				if ((this._HomeSystem != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomeSystemIdChanging(value);
					this.SendPropertyChanging();
					this._HomeSystem = value;
					this.SendPropertyChanged("HomeSystemId");
					this.OnHomeSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="varchar(1000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_RacialEnemyId", DbType="int NOT NULL")]
		public int RacialEnemyId
		{
			get
			{
				return this._RacialEnemyId;
			}
			set
			{
				if ((this._RacialEnemyId != value))
				{
					if (this._RacialEnemy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRacialEnemyIdChanging(value);
					this.SendPropertyChanging();
					this._RacialEnemyId = value;
					this.SendPropertyChanged("RacialEnemyId");
					this.OnRacialEnemyIdChanged();
				}
			}
		}
		
		[Column(Storage="_RacialPreferenceId", DbType="int NULL")]
		public System.Nullable<int> RacialPreferenceId
		{
			get
			{
				return this._RacialPreferenceId;
			}
			set
			{
				if ((this._RacialPreferenceId != value))
				{
					if (this._RacialPreference.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRacialPreferenceIdChanging(value);
					this.SendPropertyChanging();
					this._RacialPreferenceId = value;
					this.SendPropertyChanged("RacialPreferenceId");
					this.OnRacialPreferenceIdChanged();
				}
			}
		}
		
		[Association(Name="Race_Npc", Storage="_Npcs", OtherKey="RaceId")]
		public EntitySet<Npc> Npcs
		{
			get
			{
				return this._Npcs;
			}
			set
			{
				this._Npcs.Assign(value);
			}
		}
		
		[Association(Name="Race_Player", Storage="_Players", OtherKey="RaceId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="Race_Race", Storage="_Races", OtherKey="RacialEnemyId")]
		public EntitySet<Race> Races
		{
			get
			{
				return this._Races;
			}
			set
			{
				this._Races.Assign(value);
			}
		}
		
		[Association(Name="Race_Race1", Storage="_Races1", OtherKey="RacialPreferenceId")]
		public EntitySet<Race> Races1
		{
			get
			{
				return this._Races1;
			}
			set
			{
				this._Races1.Assign(value);
			}
		}
		
		[Association(Name="Race_CosmoSystem", Storage="_CosmoSystems", OtherKey="RaceId")]
		public EntitySet<CosmoSystem> CosmoSystems
		{
			get
			{
				return this._CosmoSystems;
			}
			set
			{
				this._CosmoSystems.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_Race", Storage="_CosmoSystem", ThisKey="HomeSystemId", IsForeignKey=true)]
		public CosmoSystem HomeSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.Races.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.Races.Add(this);
						this._HomeSystem = value.SystemId;
					}
					else
					{
						this._HomeSystem = default(int);
					}
					this.SendPropertyChanged("HomeSystem");
				}
			}
		}
		
		[Association(Name="Race_Race", Storage="_RacialEnemy", ThisKey="RacialEnemyId", IsForeignKey=true)]
		public Race RacialEnemy
		{
			get
			{
				return this._RacialEnemy.Entity;
			}
			set
			{
				Race previousValue = this._RacialEnemy.Entity;
				if (((previousValue != value) 
							|| (this._RacialEnemy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RacialEnemy.Entity = null;
						previousValue.Races.Remove(this);
					}
					this._RacialEnemy.Entity = value;
					if ((value != null))
					{
						value.Races.Add(this);
						this._RacialEnemyId = value.RaceId;
					}
					else
					{
						this._RacialEnemyId = default(int);
					}
					this.SendPropertyChanged("RacialEnemy");
				}
			}
		}
		
		[Association(Name="Race_Race1", Storage="_RacialPreference", ThisKey="RacialPreferenceId", IsForeignKey=true)]
		public Race RacialPreference
		{
			get
			{
				return this._RacialPreference.Entity;
			}
			set
			{
				Race previousValue = this._RacialPreference.Entity;
				if (((previousValue != value) 
							|| (this._RacialPreference.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RacialPreference.Entity = null;
						previousValue.Races1.Remove(this);
					}
					this._RacialPreference.Entity = value;
					if ((value != null))
					{
						value.Races1.Add(this);
						this._RacialPreferenceId = value.RaceId;
					}
					else
					{
						this._RacialPreferenceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RacialPreference");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
		
		private void attach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.RacialEnemy = this;
		}
		
		private void detach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.RacialEnemy = null;
		}
		
		private void attach_Races1(Race entity)
		{
			this.SendPropertyChanging();
			entity.RacialPreference = this;
		}
		
		private void detach_Races1(Race entity)
		{
			this.SendPropertyChanging();
			entity.RacialPreference = null;
		}
		
		private void attach_CosmoSystems(CosmoSystem entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_CosmoSystems(CosmoSystem entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[Table()]
	public partial class Shield : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShieldId;
		
		private string _Name;
		
		private int _Strength;
		
		private int _BasePrice;
		
		private int _CargoCost;
		
		private EntitySet<BaseShip> _BaseShips;
		
		private EntitySet<Ship> _Ships;
		
		private EntitySet<SystemShieldUpgrade> _SystemShieldUpgrades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShieldIdChanging(int value);
    partial void OnShieldIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStrengthChanging(int value);
    partial void OnStrengthChanged();
    partial void OnBasePriceChanging(int value);
    partial void OnBasePriceChanged();
    partial void OnCargoCostChanging(int value);
    partial void OnCargoCostChanged();
    #endregion
		
		public Shield()
		{
			this._BaseShips = new EntitySet<BaseShip>(new Action<BaseShip>(this.attach_BaseShips), new Action<BaseShip>(this.detach_BaseShips));
			this._Ships = new EntitySet<Ship>(new Action<Ship>(this.attach_Ships), new Action<Ship>(this.detach_Ships));
			this._SystemShieldUpgrades = new EntitySet<SystemShieldUpgrade>(new Action<SystemShieldUpgrade>(this.attach_SystemShieldUpgrades), new Action<SystemShieldUpgrade>(this.detach_SystemShieldUpgrades));
			OnCreated();
		}
		
		[Column(Storage="_ShieldId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShieldId
		{
			get
			{
				return this._ShieldId;
			}
			set
			{
				if ((this._ShieldId != value))
				{
					this.OnShieldIdChanging(value);
					this.SendPropertyChanging();
					this._ShieldId = value;
					this.SendPropertyChanged("ShieldId");
					this.OnShieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Strength", DbType="Int NOT NULL")]
		public int Strength
		{
			get
			{
				return this._Strength;
			}
			set
			{
				if ((this._Strength != value))
				{
					this.OnStrengthChanging(value);
					this.SendPropertyChanging();
					this._Strength = value;
					this.SendPropertyChanged("Strength");
					this.OnStrengthChanged();
				}
			}
		}
		
		[Column(Storage="_BasePrice", DbType="Int NOT NULL")]
		public int BasePrice
		{
			get
			{
				return this._BasePrice;
			}
			set
			{
				if ((this._BasePrice != value))
				{
					this.OnBasePriceChanging(value);
					this.SendPropertyChanging();
					this._BasePrice = value;
					this.SendPropertyChanged("BasePrice");
					this.OnBasePriceChanged();
				}
			}
		}
		
		[Column(Storage="_CargoCost", DbType="int NOT NULL")]
		public int CargoCost
		{
			get
			{
				return this._CargoCost;
			}
			set
			{
				if ((this._CargoCost != value))
				{
					this.OnCargoCostChanging(value);
					this.SendPropertyChanging();
					this._CargoCost = value;
					this.SendPropertyChanged("CargoCost");
					this.OnCargoCostChanged();
				}
			}
		}
		
		[Association(Name="Shield_BaseShip", Storage="_BaseShips", OtherKey="InitialShieldId")]
		public EntitySet<BaseShip> BaseShips
		{
			get
			{
				return this._BaseShips;
			}
			set
			{
				this._BaseShips.Assign(value);
			}
		}
		
		[Association(Name="Shield_Ship", Storage="_Ships", OtherKey="ShieldId")]
		public EntitySet<Ship> Ships
		{
			get
			{
				return this._Ships;
			}
			set
			{
				this._Ships.Assign(value);
			}
		}
		
		[Association(Name="Shield_SystemShieldUpgrade", Storage="_SystemShieldUpgrades", OtherKey="ShieldId")]
		public EntitySet<SystemShieldUpgrade> SystemShieldUpgrades
		{
			get
			{
				return this._SystemShieldUpgrades;
			}
			set
			{
				this._SystemShieldUpgrades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialShield = this;
		}
		
		private void detach_BaseShips(BaseShip entity)
		{
			this.SendPropertyChanging();
			entity.InitialShield = null;
		}
		
		private void attach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.Shield = this;
		}
		
		private void detach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.Shield = null;
		}
		
		private void attach_SystemShieldUpgrades(SystemShieldUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.Shield = this;
		}
		
		private void detach_SystemShieldUpgrades(SystemShieldUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.Shield = null;
		}
	}
	
	[Table()]
	public partial class Ship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShipId;
		
		private int _BaseShipId;
		
		private int _SystemId;
		
		private int _WeaponId;
		
		private int _JumpDriveId;
		
		private int _ShieldId;
		
		private int _DamageEngine;
		
		private int _DamageWeapon;
		
		private int _DamageShield;
		
		private int _DamageHull;
		
		private System.Nullable<int> _TargetSystemId;
		
		private System.Nullable<int> _CurrentJumpDriveCharge;
		
		private System.Nullable<System.DateTime> _TargetSystemArrivalTime;
		
		private EntitySet<InProgressCombat> _InProgressCombats;
		
		private EntitySet<InProgressCombat> _InProgressCombats1;
		
		private EntitySet<Npc> _Npcs;
		
		private EntitySet<Player> _Players;
		
		private EntitySet<ShipGood> _ShipGoods;
		
		private EntityRef<BaseShip> _BaseShip;
		
		private EntityRef<JumpDrive> _JumpDrive;
		
		private EntityRef<Shield> _Shield;
		
		private EntityRef<Weapon> _Weapon;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipIdChanging(int value);
    partial void OnShipIdChanged();
    partial void OnBaseShipIdChanging(int value);
    partial void OnBaseShipIdChanged();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnWeaponIdChanging(int value);
    partial void OnWeaponIdChanged();
    partial void OnJumpDriveIdChanging(int value);
    partial void OnJumpDriveIdChanged();
    partial void OnShieldIdChanging(int value);
    partial void OnShieldIdChanged();
    partial void OnDamageEngineChanging(int value);
    partial void OnDamageEngineChanged();
    partial void OnDamageWeaponChanging(int value);
    partial void OnDamageWeaponChanged();
    partial void OnDamageShieldChanging(int value);
    partial void OnDamageShieldChanged();
    partial void OnDamageHullChanging(int value);
    partial void OnDamageHullChanged();
    partial void OnTargetSystemIdChanging(System.Nullable<int> value);
    partial void OnTargetSystemIdChanged();
    partial void OnCurrentJumpDriveChargeChanging(System.Nullable<int> value);
    partial void OnCurrentJumpDriveChargeChanged();
    partial void OnTargetSystemArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTargetSystemArrivalTimeChanged();
    #endregion
		
		public Ship()
		{
			this._InProgressCombats = new EntitySet<InProgressCombat>(new Action<InProgressCombat>(this.attach_InProgressCombats), new Action<InProgressCombat>(this.detach_InProgressCombats));
			this._InProgressCombats1 = new EntitySet<InProgressCombat>(new Action<InProgressCombat>(this.attach_InProgressCombats1), new Action<InProgressCombat>(this.detach_InProgressCombats1));
			this._Npcs = new EntitySet<Npc>(new Action<Npc>(this.attach_Npcs), new Action<Npc>(this.detach_Npcs));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._ShipGoods = new EntitySet<ShipGood>(new Action<ShipGood>(this.attach_ShipGoods), new Action<ShipGood>(this.detach_ShipGoods));
			this._BaseShip = default(EntityRef<BaseShip>);
			this._JumpDrive = default(EntityRef<JumpDrive>);
			this._Shield = default(EntityRef<Shield>);
			this._Weapon = default(EntityRef<Weapon>);
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			OnCreated();
		}
		
		[Column(Storage="_ShipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShipId
		{
			get
			{
				return this._ShipId;
			}
			set
			{
				if ((this._ShipId != value))
				{
					this.OnShipIdChanging(value);
					this.SendPropertyChanging();
					this._ShipId = value;
					this.SendPropertyChanged("ShipId");
					this.OnShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_BaseShipId", DbType="Int NOT NULL")]
		public int BaseShipId
		{
			get
			{
				return this._BaseShipId;
			}
			set
			{
				if ((this._BaseShipId != value))
				{
					if (this._BaseShip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseShipIdChanging(value);
					this.SendPropertyChanging();
					this._BaseShipId = value;
					this.SendPropertyChanged("BaseShipId");
					this.OnBaseShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL")]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponId", DbType="Int NOT NULL")]
		public int WeaponId
		{
			get
			{
				return this._WeaponId;
			}
			set
			{
				if ((this._WeaponId != value))
				{
					if (this._Weapon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeaponIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponId = value;
					this.SendPropertyChanged("WeaponId");
					this.OnWeaponIdChanged();
				}
			}
		}
		
		[Column(Storage="_JumpDriveId", DbType="Int NOT NULL")]
		public int JumpDriveId
		{
			get
			{
				return this._JumpDriveId;
			}
			set
			{
				if ((this._JumpDriveId != value))
				{
					if (this._JumpDrive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJumpDriveIdChanging(value);
					this.SendPropertyChanging();
					this._JumpDriveId = value;
					this.SendPropertyChanged("JumpDriveId");
					this.OnJumpDriveIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShieldId", DbType="Int NOT NULL")]
		public int ShieldId
		{
			get
			{
				return this._ShieldId;
			}
			set
			{
				if ((this._ShieldId != value))
				{
					if (this._Shield.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShieldIdChanging(value);
					this.SendPropertyChanging();
					this._ShieldId = value;
					this.SendPropertyChanged("ShieldId");
					this.OnShieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_DamageEngine", DbType="Int NOT NULL")]
		public int DamageEngine
		{
			get
			{
				return this._DamageEngine;
			}
			set
			{
				if ((this._DamageEngine != value))
				{
					this.OnDamageEngineChanging(value);
					this.SendPropertyChanging();
					this._DamageEngine = value;
					this.SendPropertyChanged("DamageEngine");
					this.OnDamageEngineChanged();
				}
			}
		}
		
		[Column(Storage="_DamageWeapon", DbType="Int NOT NULL")]
		public int DamageWeapon
		{
			get
			{
				return this._DamageWeapon;
			}
			set
			{
				if ((this._DamageWeapon != value))
				{
					this.OnDamageWeaponChanging(value);
					this.SendPropertyChanging();
					this._DamageWeapon = value;
					this.SendPropertyChanged("DamageWeapon");
					this.OnDamageWeaponChanged();
				}
			}
		}
		
		[Column(Storage="_DamageShield", DbType="Int NOT NULL")]
		public int DamageShield
		{
			get
			{
				return this._DamageShield;
			}
			set
			{
				if ((this._DamageShield != value))
				{
					this.OnDamageShieldChanging(value);
					this.SendPropertyChanging();
					this._DamageShield = value;
					this.SendPropertyChanged("DamageShield");
					this.OnDamageShieldChanged();
				}
			}
		}
		
		[Column(Storage="_DamageHull", DbType="Int NOT NULL")]
		public int DamageHull
		{
			get
			{
				return this._DamageHull;
			}
			set
			{
				if ((this._DamageHull != value))
				{
					this.OnDamageHullChanging(value);
					this.SendPropertyChanging();
					this._DamageHull = value;
					this.SendPropertyChanged("DamageHull");
					this.OnDamageHullChanged();
				}
			}
		}
		
		[Column(Storage="_TargetSystemId", DbType="Int")]
		public System.Nullable<int> TargetSystemId
		{
			get
			{
				return this._TargetSystemId;
			}
			set
			{
				if ((this._TargetSystemId != value))
				{
					this.OnTargetSystemIdChanging(value);
					this.SendPropertyChanging();
					this._TargetSystemId = value;
					this.SendPropertyChanged("TargetSystemId");
					this.OnTargetSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentJumpDriveCharge", DbType="Int")]
		public System.Nullable<int> CurrentJumpDriveCharge
		{
			get
			{
				return this._CurrentJumpDriveCharge;
			}
			set
			{
				if ((this._CurrentJumpDriveCharge != value))
				{
					this.OnCurrentJumpDriveChargeChanging(value);
					this.SendPropertyChanging();
					this._CurrentJumpDriveCharge = value;
					this.SendPropertyChanged("CurrentJumpDriveCharge");
					this.OnCurrentJumpDriveChargeChanged();
				}
			}
		}
		
		[Column(Storage="_TargetSystemArrivalTime", DbType="datetime")]
		public System.Nullable<System.DateTime> TargetSystemArrivalTime
		{
			get
			{
				return this._TargetSystemArrivalTime;
			}
			set
			{
				if ((this._TargetSystemArrivalTime != value))
				{
					this.OnTargetSystemArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._TargetSystemArrivalTime = value;
					this.SendPropertyChanged("TargetSystemArrivalTime");
					this.OnTargetSystemArrivalTimeChanged();
				}
			}
		}
		
		[Association(Name="Ship_InProgressCombat", Storage="_InProgressCombats", OtherKey="AttackerShipId")]
		public EntitySet<InProgressCombat> InProgressCombats
		{
			get
			{
				return this._InProgressCombats;
			}
			set
			{
				this._InProgressCombats.Assign(value);
			}
		}
		
		[Association(Name="Ship_InProgressCombat1", Storage="_InProgressCombats1", OtherKey="DefenderShipId")]
		public EntitySet<InProgressCombat> InProgressCombats1
		{
			get
			{
				return this._InProgressCombats1;
			}
			set
			{
				this._InProgressCombats1.Assign(value);
			}
		}
		
		[Association(Name="Ship_Npc", Storage="_Npcs", OtherKey="ShipId")]
		public EntitySet<Npc> Npcs
		{
			get
			{
				return this._Npcs;
			}
			set
			{
				this._Npcs.Assign(value);
			}
		}
		
		[Association(Name="Ship_Player", Storage="_Players", OtherKey="ShipId")]
		public virtual EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[Association(Name="Ship_ShipGood", Storage="_ShipGoods", OtherKey="ShipId")]
		public EntitySet<ShipGood> ShipGoods
		{
			get
			{
				return this._ShipGoods;
			}
			set
			{
				this._ShipGoods.Assign(value);
			}
		}
		
		[Association(Name="BaseShip_Ship", Storage="_BaseShip", ThisKey="BaseShipId", IsForeignKey=true)]
		public virtual BaseShip BaseShip
		{
			get
			{
				return this._BaseShip.Entity;
			}
			set
			{
				BaseShip previousValue = this._BaseShip.Entity;
				if (((previousValue != value) 
							|| (this._BaseShip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseShip.Entity = null;
						previousValue.Ships.Remove(this);
					}
					this._BaseShip.Entity = value;
					if ((value != null))
					{
						value.Ships.Add(this);
						this._BaseShipId = value.BaseShipId;
					}
					else
					{
						this._BaseShipId = default(int);
					}
					this.SendPropertyChanged("BaseShip");
				}
			}
		}
		
		[Association(Name="JumpDrive_Ship", Storage="_JumpDrive", ThisKey="JumpDriveId", IsForeignKey=true)]
		public virtual JumpDrive JumpDrive
		{
			get
			{
				return this._JumpDrive.Entity;
			}
			set
			{
				JumpDrive previousValue = this._JumpDrive.Entity;
				if (((previousValue != value) 
							|| (this._JumpDrive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JumpDrive.Entity = null;
						previousValue.Ships.Remove(this);
					}
					this._JumpDrive.Entity = value;
					if ((value != null))
					{
						value.Ships.Add(this);
						this._JumpDriveId = value.JumpDriveId;
					}
					else
					{
						this._JumpDriveId = default(int);
					}
					this.SendPropertyChanged("JumpDrive");
				}
			}
		}
		
		[Association(Name="Shield_Ship", Storage="_Shield", ThisKey="ShieldId", IsForeignKey=true)]
		public Shield Shield
		{
			get
			{
				return this._Shield.Entity;
			}
			set
			{
				Shield previousValue = this._Shield.Entity;
				if (((previousValue != value) 
							|| (this._Shield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shield.Entity = null;
						previousValue.Ships.Remove(this);
					}
					this._Shield.Entity = value;
					if ((value != null))
					{
						value.Ships.Add(this);
						this._ShieldId = value.ShieldId;
					}
					else
					{
						this._ShieldId = default(int);
					}
					this.SendPropertyChanged("Shield");
				}
			}
		}
		
		[Association(Name="Weapon_Ship", Storage="_Weapon", ThisKey="WeaponId", IsForeignKey=true)]
		public Weapon Weapon
		{
			get
			{
				return this._Weapon.Entity;
			}
			set
			{
				Weapon previousValue = this._Weapon.Entity;
				if (((previousValue != value) 
							|| (this._Weapon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Weapon.Entity = null;
						previousValue.Ships.Remove(this);
					}
					this._Weapon.Entity = value;
					if ((value != null))
					{
						value.Ships.Add(this);
						this._WeaponId = value.WeaponId;
					}
					else
					{
						this._WeaponId = default(int);
					}
					this.SendPropertyChanged("Weapon");
				}
			}
		}
		
		[Association(Name="CosmoSystem_Ship", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public virtual CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.Ships.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.Ships.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InProgressCombats(InProgressCombat entity)
		{
			this.SendPropertyChanging();
			entity.Ship = this;
		}
		
		private void detach_InProgressCombats(InProgressCombat entity)
		{
			this.SendPropertyChanging();
			entity.Ship = null;
		}
		
		private void attach_InProgressCombats1(InProgressCombat entity)
		{
			this.SendPropertyChanging();
			entity.Ship1 = this;
		}
		
		private void detach_InProgressCombats1(InProgressCombat entity)
		{
			this.SendPropertyChanging();
			entity.Ship1 = null;
		}
		
		private void attach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.Ship = this;
		}
		
		private void detach_Npcs(Npc entity)
		{
			this.SendPropertyChanging();
			entity.Ship = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Ship = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Ship = null;
		}
		
		private void attach_ShipGoods(ShipGood entity)
		{
			this.SendPropertyChanging();
			entity.Ship = this;
		}
		
		private void detach_ShipGoods(ShipGood entity)
		{
			this.SendPropertyChanging();
			entity.Ship = null;
		}
	}
	
	[Table()]
	public partial class ShipGood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShipId;
		
		private int _GoodId;
		
		private int _Quantity;
		
		private EntityRef<Good> _Good;
		
		private EntityRef<Ship> _Ship;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShipIdChanging(int value);
    partial void OnShipIdChanged();
    partial void OnGoodIdChanging(int value);
    partial void OnGoodIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public ShipGood()
		{
			this._Good = default(EntityRef<Good>);
			this._Ship = default(EntityRef<Ship>);
			OnCreated();
		}
		
		[Column(Storage="_ShipId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShipId
		{
			get
			{
				return this._ShipId;
			}
			set
			{
				if ((this._ShipId != value))
				{
					if (this._Ship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShipIdChanging(value);
					this.SendPropertyChanging();
					this._ShipId = value;
					this.SendPropertyChanged("ShipId");
					this.OnShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_GoodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GoodId
		{
			get
			{
				return this._GoodId;
			}
			set
			{
				if ((this._GoodId != value))
				{
					if (this._Good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIdChanging(value);
					this.SendPropertyChanging();
					this._GoodId = value;
					this.SendPropertyChanged("GoodId");
					this.OnGoodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Association(Name="Good_ShipGood", Storage="_Good", ThisKey="GoodId", IsForeignKey=true)]
		public Good Good
		{
			get
			{
				return this._Good.Entity;
			}
			set
			{
				Good previousValue = this._Good.Entity;
				if (((previousValue != value) 
							|| (this._Good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Good.Entity = null;
						previousValue.ShipGoods.Remove(this);
					}
					this._Good.Entity = value;
					if ((value != null))
					{
						value.ShipGoods.Add(this);
						this._GoodId = value.GoodId;
					}
					else
					{
						this._GoodId = default(int);
					}
					this.SendPropertyChanged("Good");
				}
			}
		}
		
		[Association(Name="Ship_ShipGood", Storage="_Ship", ThisKey="ShipId", IsForeignKey=true)]
		public Ship Ship
		{
			get
			{
				return this._Ship.Entity;
			}
			set
			{
				Ship previousValue = this._Ship.Entity;
				if (((previousValue != value) 
							|| (this._Ship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ship.Entity = null;
						previousValue.ShipGoods.Remove(this);
					}
					this._Ship.Entity = value;
					if ((value != null))
					{
						value.ShipGoods.Add(this);
						this._ShipId = value.ShipId;
					}
					else
					{
						this._ShipId = default(int);
					}
					this.SendPropertyChanged("Ship");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="System")]
	public partial class CosmoSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private string _Name;
		
		private int _PositionX;
		
		private int _PositionY;
		
		private bool _HasBank;
		
		private int _RaceId;
		
		private EntitySet<Race> _Races;
		
		private EntitySet<Ship> _Ships;
		
		private EntitySet<SystemGood> _SystemGoods;
		
		private EntitySet<SystemJumpDriveUpgrade> _SystemJumpDriveUpgrades;
		
		private EntitySet<SystemShieldUpgrade> _SystemShieldUpgrades;
		
		private EntitySet<SystemShip> _SystemShips;
		
		private EntitySet<SystemWeaponUpgrade> _SystemWeaponUpgrades;
		
		private EntityRef<Race> _Race;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionXChanging(int value);
    partial void OnPositionXChanged();
    partial void OnPositionYChanging(int value);
    partial void OnPositionYChanged();
    partial void OnHasBankChanging(bool value);
    partial void OnHasBankChanged();
    partial void OnRaceIdChanging(int value);
    partial void OnRaceIdChanged();
    #endregion
		
		public CosmoSystem()
		{
			this._Races = new EntitySet<Race>(new Action<Race>(this.attach_Races), new Action<Race>(this.detach_Races));
			this._Ships = new EntitySet<Ship>(new Action<Ship>(this.attach_Ships), new Action<Ship>(this.detach_Ships));
			this._SystemGoods = new EntitySet<SystemGood>(new Action<SystemGood>(this.attach_SystemGoods), new Action<SystemGood>(this.detach_SystemGoods));
			this._SystemJumpDriveUpgrades = new EntitySet<SystemJumpDriveUpgrade>(new Action<SystemJumpDriveUpgrade>(this.attach_SystemJumpDriveUpgrades), new Action<SystemJumpDriveUpgrade>(this.detach_SystemJumpDriveUpgrades));
			this._SystemShieldUpgrades = new EntitySet<SystemShieldUpgrade>(new Action<SystemShieldUpgrade>(this.attach_SystemShieldUpgrades), new Action<SystemShieldUpgrade>(this.detach_SystemShieldUpgrades));
			this._SystemShips = new EntitySet<SystemShip>(new Action<SystemShip>(this.attach_SystemShips), new Action<SystemShip>(this.detach_SystemShips));
			this._SystemWeaponUpgrades = new EntitySet<SystemWeaponUpgrade>(new Action<SystemWeaponUpgrade>(this.attach_SystemWeaponUpgrades), new Action<SystemWeaponUpgrade>(this.detach_SystemWeaponUpgrades));
			this._Race = default(EntityRef<Race>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public virtual int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public virtual string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_PositionX", DbType="Int NOT NULL")]
		public virtual int PositionX
		{
			get
			{
				return this._PositionX;
			}
			set
			{
				if ((this._PositionX != value))
				{
					this.OnPositionXChanging(value);
					this.SendPropertyChanging();
					this._PositionX = value;
					this.SendPropertyChanged("PositionX");
					this.OnPositionXChanged();
				}
			}
		}
		
		[Column(Storage="_PositionY", DbType="Int NOT NULL")]
		public virtual int PositionY
		{
			get
			{
				return this._PositionY;
			}
			set
			{
				if ((this._PositionY != value))
				{
					this.OnPositionYChanging(value);
					this.SendPropertyChanging();
					this._PositionY = value;
					this.SendPropertyChanged("PositionY");
					this.OnPositionYChanged();
				}
			}
		}
		
		[Column(Storage="_HasBank", DbType="Bit NOT NULL")]
		public virtual bool HasBank
		{
			get
			{
				return this._HasBank;
			}
			set
			{
				if ((this._HasBank != value))
				{
					this.OnHasBankChanging(value);
					this.SendPropertyChanging();
					this._HasBank = value;
					this.SendPropertyChanged("HasBank");
					this.OnHasBankChanged();
				}
			}
		}
		
		[Column(Storage="_RaceId", DbType="int NOT NULL", IsDbGenerated=true)]
		public int RaceId
		{
			get
			{
				return this._RaceId;
			}
			set
			{
				if ((this._RaceId != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIdChanging(value);
					this.SendPropertyChanging();
					this._RaceId = value;
					this.SendPropertyChanged("RaceId");
					this.OnRaceIdChanged();
				}
			}
		}
		
		[Association(Name="CosmoSystem_Race", Storage="_Races", OtherKey="HomeSystemId")]
		public EntitySet<Race> Races
		{
			get
			{
				return this._Races;
			}
			set
			{
				this._Races.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_Ship", Storage="_Ships", OtherKey="SystemId")]
		public virtual EntitySet<Ship> Ships
		{
			get
			{
				return this._Ships;
			}
			set
			{
				this._Ships.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_SystemGood", Storage="_SystemGoods", OtherKey="SystemId")]
		public EntitySet<SystemGood> SystemGoods
		{
			get
			{
				return this._SystemGoods;
			}
			set
			{
				this._SystemGoods.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_SystemJumpDriveUpgrade", Storage="_SystemJumpDriveUpgrades", OtherKey="SystemId")]
		public EntitySet<SystemJumpDriveUpgrade> SystemJumpDriveUpgrades
		{
			get
			{
				return this._SystemJumpDriveUpgrades;
			}
			set
			{
				this._SystemJumpDriveUpgrades.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_SystemShieldUpgrade", Storage="_SystemShieldUpgrades", OtherKey="SystemId")]
		public EntitySet<SystemShieldUpgrade> SystemShieldUpgrades
		{
			get
			{
				return this._SystemShieldUpgrades;
			}
			set
			{
				this._SystemShieldUpgrades.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_SystemShip", Storage="_SystemShips", OtherKey="SystemId")]
		public EntitySet<SystemShip> SystemShips
		{
			get
			{
				return this._SystemShips;
			}
			set
			{
				this._SystemShips.Assign(value);
			}
		}
		
		[Association(Name="CosmoSystem_SystemWeaponUpgrade", Storage="_SystemWeaponUpgrades", OtherKey="SystemId")]
		public EntitySet<SystemWeaponUpgrade> SystemWeaponUpgrades
		{
			get
			{
				return this._SystemWeaponUpgrades;
			}
			set
			{
				this._SystemWeaponUpgrades.Assign(value);
			}
		}
		
		[Association(Name="Race_CosmoSystem", Storage="_Race", ThisKey="RaceId", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.CosmoSystems.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.CosmoSystems.Add(this);
						this._RaceId = value.RaceId;
					}
					else
					{
						this._RaceId = default(int);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.HomeSystem = this;
		}
		
		private void detach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.HomeSystem = null;
		}
		
		private void attach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_Ships(Ship entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
		
		private void attach_SystemGoods(SystemGood entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_SystemGoods(SystemGood entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
		
		private void attach_SystemJumpDriveUpgrades(SystemJumpDriveUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_SystemJumpDriveUpgrades(SystemJumpDriveUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
		
		private void attach_SystemShieldUpgrades(SystemShieldUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_SystemShieldUpgrades(SystemShieldUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
		
		private void attach_SystemShips(SystemShip entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_SystemShips(SystemShip entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
		
		private void attach_SystemWeaponUpgrades(SystemWeaponUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = this;
		}
		
		private void detach_SystemWeaponUpgrades(SystemWeaponUpgrade entity)
		{
			this.SendPropertyChanging();
			entity.CosmoSystem = null;
		}
	}
	
	[Table()]
	public partial class SystemGood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private int _GoodId;
		
		private int _Quantity;
		
		private double _PriceMultiplier;
		
		private double _ProductionFactor;
		
		private double _ConsumptionFactor;
		
		private EntityRef<Good> _Good;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnGoodIdChanging(int value);
    partial void OnGoodIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceMultiplierChanging(double value);
    partial void OnPriceMultiplierChanged();
    partial void OnProductionFactorChanging(double value);
    partial void OnProductionFactorChanged();
    partial void OnConsumptionFactorChanging(double value);
    partial void OnConsumptionFactorChanged();
    #endregion
		
		public SystemGood()
		{
			this._Good = default(EntityRef<Good>);
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_GoodId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GoodId
		{
			get
			{
				return this._GoodId;
			}
			set
			{
				if ((this._GoodId != value))
				{
					if (this._Good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIdChanging(value);
					this.SendPropertyChanging();
					this._GoodId = value;
					this.SendPropertyChanged("GoodId");
					this.OnGoodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PriceMultiplier", DbType="Float NOT NULL")]
		public double PriceMultiplier
		{
			get
			{
				return this._PriceMultiplier;
			}
			set
			{
				if ((this._PriceMultiplier != value))
				{
					this.OnPriceMultiplierChanging(value);
					this.SendPropertyChanging();
					this._PriceMultiplier = value;
					this.SendPropertyChanged("PriceMultiplier");
					this.OnPriceMultiplierChanged();
				}
			}
		}
		
		[Column(Storage="_ProductionFactor", DbType="float NOT NULL")]
		public double ProductionFactor
		{
			get
			{
				return this._ProductionFactor;
			}
			set
			{
				if ((this._ProductionFactor != value))
				{
					this.OnProductionFactorChanging(value);
					this.SendPropertyChanging();
					this._ProductionFactor = value;
					this.SendPropertyChanged("ProductionFactor");
					this.OnProductionFactorChanged();
				}
			}
		}
		
		[Column(Storage="_ConsumptionFactor", DbType="float NOT NULL")]
		public double ConsumptionFactor
		{
			get
			{
				return this._ConsumptionFactor;
			}
			set
			{
				if ((this._ConsumptionFactor != value))
				{
					this.OnConsumptionFactorChanging(value);
					this.SendPropertyChanging();
					this._ConsumptionFactor = value;
					this.SendPropertyChanged("ConsumptionFactor");
					this.OnConsumptionFactorChanged();
				}
			}
		}
		
		[Association(Name="Good_SystemGood", Storage="_Good", ThisKey="GoodId", IsForeignKey=true)]
		public Good Good
		{
			get
			{
				return this._Good.Entity;
			}
			set
			{
				Good previousValue = this._Good.Entity;
				if (((previousValue != value) 
							|| (this._Good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Good.Entity = null;
						previousValue.SystemGoods.Remove(this);
					}
					this._Good.Entity = value;
					if ((value != null))
					{
						value.SystemGoods.Add(this);
						this._GoodId = value.GoodId;
					}
					else
					{
						this._GoodId = default(int);
					}
					this.SendPropertyChanged("Good");
				}
			}
		}
		
		[Association(Name="CosmoSystem_SystemGood", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.SystemGoods.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.SystemGoods.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class SystemJumpDriveUpgrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private int _JumpDriveId;
		
		private int _Quantity;
		
		private double _PriceMultiplier;
		
		private EntityRef<JumpDrive> _JumpDrive;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnJumpDriveIdChanging(int value);
    partial void OnJumpDriveIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceMultiplierChanging(double value);
    partial void OnPriceMultiplierChanged();
    #endregion
		
		public SystemJumpDriveUpgrade()
		{
			this._JumpDrive = default(EntityRef<JumpDrive>);
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_JumpDriveId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int JumpDriveId
		{
			get
			{
				return this._JumpDriveId;
			}
			set
			{
				if ((this._JumpDriveId != value))
				{
					if (this._JumpDrive.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJumpDriveIdChanging(value);
					this.SendPropertyChanging();
					this._JumpDriveId = value;
					this.SendPropertyChanged("JumpDriveId");
					this.OnJumpDriveIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PriceMultiplier", DbType="Float NOT NULL")]
		public double PriceMultiplier
		{
			get
			{
				return this._PriceMultiplier;
			}
			set
			{
				if ((this._PriceMultiplier != value))
				{
					this.OnPriceMultiplierChanging(value);
					this.SendPropertyChanging();
					this._PriceMultiplier = value;
					this.SendPropertyChanged("PriceMultiplier");
					this.OnPriceMultiplierChanged();
				}
			}
		}
		
		[Association(Name="JumpDrive_SystemJumpDriveUpgrade", Storage="_JumpDrive", ThisKey="JumpDriveId", IsForeignKey=true)]
		public virtual JumpDrive JumpDrive
		{
			get
			{
				return this._JumpDrive.Entity;
			}
			set
			{
				JumpDrive previousValue = this._JumpDrive.Entity;
				if (((previousValue != value) 
							|| (this._JumpDrive.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JumpDrive.Entity = null;
						previousValue.SystemJumpDriveUpgrades.Remove(this);
					}
					this._JumpDrive.Entity = value;
					if ((value != null))
					{
						value.SystemJumpDriveUpgrades.Add(this);
						this._JumpDriveId = value.JumpDriveId;
					}
					else
					{
						this._JumpDriveId = default(int);
					}
					this.SendPropertyChanged("JumpDrive");
				}
			}
		}
		
		[Association(Name="CosmoSystem_SystemJumpDriveUpgrade", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.SystemJumpDriveUpgrades.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.SystemJumpDriveUpgrades.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class SystemShieldUpgrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private int _ShieldId;
		
		private int _Quantity;
		
		private double _PriceMultiplier;
		
		private EntityRef<Shield> _Shield;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnShieldIdChanging(int value);
    partial void OnShieldIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceMultiplierChanging(double value);
    partial void OnPriceMultiplierChanged();
    #endregion
		
		public SystemShieldUpgrade()
		{
			this._Shield = default(EntityRef<Shield>);
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_ShieldId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ShieldId
		{
			get
			{
				return this._ShieldId;
			}
			set
			{
				if ((this._ShieldId != value))
				{
					if (this._Shield.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShieldIdChanging(value);
					this.SendPropertyChanging();
					this._ShieldId = value;
					this.SendPropertyChanged("ShieldId");
					this.OnShieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PriceMultiplier", DbType="Float NOT NULL")]
		public double PriceMultiplier
		{
			get
			{
				return this._PriceMultiplier;
			}
			set
			{
				if ((this._PriceMultiplier != value))
				{
					this.OnPriceMultiplierChanging(value);
					this.SendPropertyChanging();
					this._PriceMultiplier = value;
					this.SendPropertyChanged("PriceMultiplier");
					this.OnPriceMultiplierChanged();
				}
			}
		}
		
		[Association(Name="Shield_SystemShieldUpgrade", Storage="_Shield", ThisKey="ShieldId", IsForeignKey=true)]
		public Shield Shield
		{
			get
			{
				return this._Shield.Entity;
			}
			set
			{
				Shield previousValue = this._Shield.Entity;
				if (((previousValue != value) 
							|| (this._Shield.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shield.Entity = null;
						previousValue.SystemShieldUpgrades.Remove(this);
					}
					this._Shield.Entity = value;
					if ((value != null))
					{
						value.SystemShieldUpgrades.Add(this);
						this._ShieldId = value.ShieldId;
					}
					else
					{
						this._ShieldId = default(int);
					}
					this.SendPropertyChanged("Shield");
				}
			}
		}
		
		[Association(Name="CosmoSystem_SystemShieldUpgrade", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.SystemShieldUpgrades.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.SystemShieldUpgrades.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class SystemShip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private int _BaseShipId;
		
		private int _Quantity;
		
		private double _PriceMultiplier;
		
		private EntityRef<BaseShip> _BaseShip;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnBaseShipIdChanging(int value);
    partial void OnBaseShipIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceMultiplierChanging(double value);
    partial void OnPriceMultiplierChanged();
    #endregion
		
		public SystemShip()
		{
			this._BaseShip = default(EntityRef<BaseShip>);
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_BaseShipId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BaseShipId
		{
			get
			{
				return this._BaseShipId;
			}
			set
			{
				if ((this._BaseShipId != value))
				{
					if (this._BaseShip.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseShipIdChanging(value);
					this.SendPropertyChanging();
					this._BaseShipId = value;
					this.SendPropertyChanged("BaseShipId");
					this.OnBaseShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PriceMultiplier", DbType="Float NOT NULL")]
		public double PriceMultiplier
		{
			get
			{
				return this._PriceMultiplier;
			}
			set
			{
				if ((this._PriceMultiplier != value))
				{
					this.OnPriceMultiplierChanging(value);
					this.SendPropertyChanging();
					this._PriceMultiplier = value;
					this.SendPropertyChanged("PriceMultiplier");
					this.OnPriceMultiplierChanged();
				}
			}
		}
		
		[Association(Name="BaseShip_SystemShip", Storage="_BaseShip", ThisKey="BaseShipId", IsForeignKey=true)]
		public virtual BaseShip BaseShip
		{
			get
			{
				return this._BaseShip.Entity;
			}
			set
			{
				BaseShip previousValue = this._BaseShip.Entity;
				if (((previousValue != value) 
							|| (this._BaseShip.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BaseShip.Entity = null;
						previousValue.SystemShips.Remove(this);
					}
					this._BaseShip.Entity = value;
					if ((value != null))
					{
						value.SystemShips.Add(this);
						this._BaseShipId = value.BaseShipId;
					}
					else
					{
						this._BaseShipId = default(int);
					}
					this.SendPropertyChanged("BaseShip");
				}
			}
		}
		
		[Association(Name="CosmoSystem_SystemShip", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.SystemShips.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.SystemShips.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table()]
	public partial class SystemWeaponUpgrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SystemId;
		
		private int _WeaponId;
		
		private int _Quantity;
		
		private double _PriceMultiplier;
		
		private EntityRef<CosmoSystem> _CosmoSystem;
		
		private EntityRef<Weapon> _Weapon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemIdChanging(int value);
    partial void OnSystemIdChanged();
    partial void OnWeaponIdChanging(int value);
    partial void OnWeaponIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnPriceMultiplierChanging(double value);
    partial void OnPriceMultiplierChanged();
    #endregion
		
		public SystemWeaponUpgrade()
		{
			this._CosmoSystem = default(EntityRef<CosmoSystem>);
			this._Weapon = default(EntityRef<Weapon>);
			OnCreated();
		}
		
		[Column(Storage="_SystemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SystemId
		{
			get
			{
				return this._SystemId;
			}
			set
			{
				if ((this._SystemId != value))
				{
					if (this._CosmoSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemIdChanging(value);
					this.SendPropertyChanging();
					this._SystemId = value;
					this.SendPropertyChanged("SystemId");
					this.OnSystemIdChanged();
				}
			}
		}
		
		[Column(Storage="_WeaponId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int WeaponId
		{
			get
			{
				return this._WeaponId;
			}
			set
			{
				if ((this._WeaponId != value))
				{
					if (this._Weapon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeaponIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponId = value;
					this.SendPropertyChanged("WeaponId");
					this.OnWeaponIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_PriceMultiplier", DbType="Float NOT NULL")]
		public double PriceMultiplier
		{
			get
			{
				return this._PriceMultiplier;
			}
			set
			{
				if ((this._PriceMultiplier != value))
				{
					this.OnPriceMultiplierChanging(value);
					this.SendPropertyChanging();
					this._PriceMultiplier = value;
					this.SendPropertyChanged("PriceMultiplier");
					this.OnPriceMultiplierChanged();
				}
			}
		}
		
		[Association(Name="CosmoSystem_SystemWeaponUpgrade", Storage="_CosmoSystem", ThisKey="SystemId", IsForeignKey=true)]
		public CosmoSystem CosmoSystem
		{
			get
			{
				return this._CosmoSystem.Entity;
			}
			set
			{
				CosmoSystem previousValue = this._CosmoSystem.Entity;
				if (((previousValue != value) 
							|| (this._CosmoSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CosmoSystem.Entity = null;
						previousValue.SystemWeaponUpgrades.Remove(this);
					}
					this._CosmoSystem.Entity = value;
					if ((value != null))
					{
						value.SystemWeaponUpgrades.Add(this);
						this._SystemId = value.SystemId;
					}
					else
					{
						this._SystemId = default(int);
					}
					this.SendPropertyChanged("CosmoSystem");
				}
			}
		}
		
		[Association(Name="Weapon_SystemWeaponUpgrade", Storage="_Weapon", ThisKey="WeaponId", IsForeignKey=true)]
		public Weapon Weapon
		{
			get
			{
				return this._Weapon.Entity;
			}
			set
			{
				Weapon previousValue = this._Weapon.Entity;
				if (((previousValue != value) 
							|| (this._Weapon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Weapon.Entity = null;
						previousValue.SystemWeaponUpgrades.Remove(this);
					}
					this._Weapon.Entity = value;
					if ((value != null))
					{
						value.SystemWeaponUpgrades.Add(this);
						this._WeaponId = value.WeaponId;
					}
					else
					{
						this._WeaponId = default(int);
					}
					this.SendPropertyChanged("Weapon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _Email;
		
		private string _UserName;
		
		private string _Password;
		
		private bool _Validated;
		
		private bool _Active;
		
		private bool _Admin;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private int _LoginAttemptCount;
		
		private System.Nullable<System.DateTime> _LastActivity;
		
		private System.Nullable<System.DateTime> _LastVerificationSent;
		
		private System.DateTime _Joined;
		
		private string _SessionID;
		
		private EntitySet<BuddyList> _BuddyLists;
		
		private EntitySet<IgnoreList> _IgnoreLists;
		
		private EntitySet<Message> _Messages1;
		
		private EntitySet<Player> _Players;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnValidatedChanging(bool value);
    partial void OnValidatedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnAdminChanging(bool value);
    partial void OnAdminChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnLoginAttemptCountChanging(int value);
    partial void OnLoginAttemptCountChanged();
    partial void OnLastActivityChanging(System.Nullable<System.DateTime> value);
    partial void OnLastActivityChanged();
    partial void OnLastVerificationSentChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVerificationSentChanged();
    partial void OnJoinedChanging(System.DateTime value);
    partial void OnJoinedChanged();
    partial void OnSessionIDChanging(string value);
    partial void OnSessionIDChanged();
    #endregion
		
		public User()
		{
			this._BuddyLists = new EntitySet<BuddyList>(new Action<BuddyList>(this.attach_BuddyLists), new Action<BuddyList>(this.detach_BuddyLists));
			this._IgnoreLists = new EntitySet<IgnoreList>(new Action<IgnoreList>(this.attach_IgnoreLists), new Action<IgnoreList>(this.detach_IgnoreLists));
			this._Messages1 = new EntitySet<Message>(new Action<Message>(this.attach_Messages1), new Action<Message>(this.detach_Messages1));
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			OnCreated();
		}
		
		[Column(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Validated", DbType="Bit NOT NULL")]
		public bool Validated
		{
			get
			{
				return this._Validated;
			}
			set
			{
				if ((this._Validated != value))
				{
					this.OnValidatedChanging(value);
					this.SendPropertyChanging();
					this._Validated = value;
					this.SendPropertyChanged("Validated");
					this.OnValidatedChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Admin", DbType="Bit NOT NULL")]
		public bool Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="datetime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_LoginAttemptCount", DbType="int NOT NULL")]
		public int LoginAttemptCount
		{
			get
			{
				return this._LoginAttemptCount;
			}
			set
			{
				if ((this._LoginAttemptCount != value))
				{
					this.OnLoginAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._LoginAttemptCount = value;
					this.SendPropertyChanged("LoginAttemptCount");
					this.OnLoginAttemptCountChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivity", DbType="datetime")]
		public System.Nullable<System.DateTime> LastActivity
		{
			get
			{
				return this._LastActivity;
			}
			set
			{
				if ((this._LastActivity != value))
				{
					this.OnLastActivityChanging(value);
					this.SendPropertyChanging();
					this._LastActivity = value;
					this.SendPropertyChanged("LastActivity");
					this.OnLastActivityChanged();
				}
			}
		}
		
		[Column(Storage="_LastVerificationSent", DbType="datetime")]
		public System.Nullable<System.DateTime> LastVerificationSent
		{
			get
			{
				return this._LastVerificationSent;
			}
			set
			{
				if ((this._LastVerificationSent != value))
				{
					this.OnLastVerificationSentChanging(value);
					this.SendPropertyChanging();
					this._LastVerificationSent = value;
					this.SendPropertyChanged("LastVerificationSent");
					this.OnLastVerificationSentChanged();
				}
			}
		}
		
		[Column(Storage="_Joined", DbType="datetime NOT NULL")]
		public System.DateTime Joined
		{
			get
			{
				return this._Joined;
			}
			set
			{
				if ((this._Joined != value))
				{
					this.OnJoinedChanging(value);
					this.SendPropertyChanging();
					this._Joined = value;
					this.SendPropertyChanged("Joined");
					this.OnJoinedChanged();
				}
			}
		}
		
		[Column(Storage="_SessionID", DbType="varchar(128)")]
		public string SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[Association(Name="User_BuddyList", Storage="_BuddyLists", OtherKey="UserId")]
		public EntitySet<BuddyList> BuddyLists
		{
			get
			{
				return this._BuddyLists;
			}
			set
			{
				this._BuddyLists.Assign(value);
			}
		}
		
		[Association(Name="User_IgnoreList", Storage="_IgnoreLists", OtherKey="UserId")]
		public EntitySet<IgnoreList> IgnoreLists
		{
			get
			{
				return this._IgnoreLists;
			}
			set
			{
				this._IgnoreLists.Assign(value);
			}
		}
		
		[Association(Name="User_Message", Storage="_Messages1", OtherKey="RecipientUserId")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages1;
			}
			set
			{
				this._Messages1.Assign(value);
			}
		}
		
		[Association(Name="User_Player", Storage="_Players", OtherKey="UserId")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuddyLists(BuddyList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BuddyLists(BuddyList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_IgnoreLists(IgnoreList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_IgnoreLists(IgnoreList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.RecipientUser = this;
		}
		
		private void detach_Messages1(Message entity)
		{
			this.SendPropertyChanging();
			entity.RecipientUser = null;
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
